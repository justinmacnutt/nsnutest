#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Nsnu.DataAccess
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="nsnu_membership")]
	public partial class NsnuDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAddress(Address instance);
    partial void UpdateAddress(Address instance);
    partial void DeleteAddress(Address instance);
    partial void InsertFacilityTableOfficer(FacilityTableOfficer instance);
    partial void UpdateFacilityTableOfficer(FacilityTableOfficer instance);
    partial void DeleteFacilityTableOfficer(FacilityTableOfficer instance);
    partial void InsertCommittee(Committee instance);
    partial void UpdateCommittee(Committee instance);
    partial void DeleteCommittee(Committee instance);
    partial void InsertCommitteePosition(CommitteePosition instance);
    partial void UpdateCommitteePosition(CommitteePosition instance);
    partial void DeleteCommitteePosition(CommitteePosition instance);
    partial void InsertDistrict(District instance);
    partial void UpdateDistrict(District instance);
    partial void DeleteDistrict(District instance);
    partial void InsertFacilityAddress(FacilityAddress instance);
    partial void UpdateFacilityAddress(FacilityAddress instance);
    partial void DeleteFacilityAddress(FacilityAddress instance);
    partial void InsertFacilityLocalPosition(FacilityLocalPosition instance);
    partial void UpdateFacilityLocalPosition(FacilityLocalPosition instance);
    partial void DeleteFacilityLocalPosition(FacilityLocalPosition instance);
    partial void InsertFacilityPhone(FacilityPhone instance);
    partial void UpdateFacilityPhone(FacilityPhone instance);
    partial void DeleteFacilityPhone(FacilityPhone instance);
    partial void InsertLabourRepresentative(LabourRepresentative instance);
    partial void UpdateLabourRepresentative(LabourRepresentative instance);
    partial void DeleteLabourRepresentative(LabourRepresentative instance);
    partial void InsertNote(Note instance);
    partial void UpdateNote(Note instance);
    partial void DeleteNote(Note instance);
    partial void InsertNurseAddress(NurseAddress instance);
    partial void UpdateNurseAddress(NurseAddress instance);
    partial void DeleteNurseAddress(NurseAddress instance);
    partial void InsertNurseFacility(NurseFacility instance);
    partial void UpdateNurseFacility(NurseFacility instance);
    partial void DeleteNurseFacility(NurseFacility instance);
    partial void InsertNurseOptOut(NurseOptOut instance);
    partial void UpdateNurseOptOut(NurseOptOut instance);
    partial void DeleteNurseOptOut(NurseOptOut instance);
    partial void InsertNursePhone(NursePhone instance);
    partial void UpdateNursePhone(NursePhone instance);
    partial void DeleteNursePhone(NursePhone instance);
    partial void InsertrefAddressType(refAddressType instance);
    partial void UpdaterefAddressType(refAddressType instance);
    partial void DeleterefAddressType(refAddressType instance);
    partial void InsertrefCommitteePosition(refCommitteePosition instance);
    partial void UpdaterefCommitteePosition(refCommitteePosition instance);
    partial void DeleterefCommitteePosition(refCommitteePosition instance);
    partial void InsertrefEmployerGroup(refEmployerGroup instance);
    partial void UpdaterefEmployerGroup(refEmployerGroup instance);
    partial void DeleterefEmployerGroup(refEmployerGroup instance);
    partial void InsertrefEmploymentStatus(refEmploymentStatus instance);
    partial void UpdaterefEmploymentStatus(refEmploymentStatus instance);
    partial void DeleterefEmploymentStatus(refEmploymentStatus instance);
    partial void InsertrefEmploymentType(refEmploymentType instance);
    partial void UpdaterefEmploymentType(refEmploymentType instance);
    partial void DeleterefEmploymentType(refEmploymentType instance);
    partial void InsertrefFacilityType(refFacilityType instance);
    partial void UpdaterefFacilityType(refFacilityType instance);
    partial void DeleterefFacilityType(refFacilityType instance);
    partial void InsertrefGender(refGender instance);
    partial void UpdaterefGender(refGender instance);
    partial void DeleterefGender(refGender instance);
    partial void InsertrefLocalPosition(refLocalPosition instance);
    partial void UpdaterefLocalPosition(refLocalPosition instance);
    partial void DeleterefLocalPosition(refLocalPosition instance);
    partial void InsertrefNurseDesignation(refNurseDesignation instance);
    partial void UpdaterefNurseDesignation(refNurseDesignation instance);
    partial void DeleterefNurseDesignation(refNurseDesignation instance);
    partial void InsertrefOptOut(refOptOut instance);
    partial void UpdaterefOptOut(refOptOut instance);
    partial void DeleterefOptOut(refOptOut instance);
    partial void InsertrefPhoneType(refPhoneType instance);
    partial void UpdaterefPhoneType(refPhoneType instance);
    partial void DeleterefPhoneType(refPhoneType instance);
    partial void InsertrefTableOfficerPosition(refTableOfficerPosition instance);
    partial void UpdaterefTableOfficerPosition(refTableOfficerPosition instance);
    partial void DeleterefTableOfficerPosition(refTableOfficerPosition instance);
    partial void InsertRegion(Region instance);
    partial void UpdateRegion(Region instance);
    partial void DeleteRegion(Region instance);
    partial void InsertUserProfile(UserProfile instance);
    partial void UpdateUserProfile(UserProfile instance);
    partial void DeleteUserProfile(UserProfile instance);
    partial void InsertUserProfileRole(UserProfileRole instance);
    partial void UpdateUserProfileRole(UserProfileRole instance);
    partial void DeleteUserProfileRole(UserProfileRole instance);
    partial void InsertUserRole(UserRole instance);
    partial void UpdateUserRole(UserRole instance);
    partial void DeleteUserRole(UserRole instance);
    partial void InsertVersionHistory(VersionHistory instance);
    partial void UpdateVersionHistory(VersionHistory instance);
    partial void DeleteVersionHistory(VersionHistory instance);
    partial void InsertPhone(Phone instance);
    partial void UpdatePhone(Phone instance);
    partial void DeletePhone(Phone instance);
    partial void InsertNurseCommittee(NurseCommittee instance);
    partial void UpdateNurseCommittee(NurseCommittee instance);
    partial void DeleteNurseCommittee(NurseCommittee instance);
    partial void InsertNurse(Nurse instance);
    partial void UpdateNurse(Nurse instance);
    partial void DeleteNurse(Nurse instance);
    partial void InsertFacility(Facility instance);
    partial void UpdateFacility(Facility instance);
    partial void DeleteFacility(Facility instance);
    #endregion
		
		public NsnuDataContext() : 
				base(global::Nsnu.DataAccess.Properties.Settings.Default.nsnu_membershipConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public NsnuDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public NsnuDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public NsnuDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public NsnuDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Address> Addresses
		{
			get
			{
				return this.GetTable<Address>();
			}
		}
		
		public System.Data.Linq.Table<FacilityTableOfficer> FacilityTableOfficers
		{
			get
			{
				return this.GetTable<FacilityTableOfficer>();
			}
		}
		
		public System.Data.Linq.Table<Committee> Committees
		{
			get
			{
				return this.GetTable<Committee>();
			}
		}
		
		public System.Data.Linq.Table<CommitteePosition> CommitteePositions
		{
			get
			{
				return this.GetTable<CommitteePosition>();
			}
		}
		
		public System.Data.Linq.Table<District> Districts
		{
			get
			{
				return this.GetTable<District>();
			}
		}
		
		public System.Data.Linq.Table<FacilityAddress> FacilityAddresses
		{
			get
			{
				return this.GetTable<FacilityAddress>();
			}
		}
		
		public System.Data.Linq.Table<FacilityLocalPosition> FacilityLocalPositions
		{
			get
			{
				return this.GetTable<FacilityLocalPosition>();
			}
		}
		
		public System.Data.Linq.Table<FacilityPhone> FacilityPhones
		{
			get
			{
				return this.GetTable<FacilityPhone>();
			}
		}
		
		public System.Data.Linq.Table<LabourRepresentative> LabourRepresentatives
		{
			get
			{
				return this.GetTable<LabourRepresentative>();
			}
		}
		
		public System.Data.Linq.Table<Note> Notes
		{
			get
			{
				return this.GetTable<Note>();
			}
		}
		
		public System.Data.Linq.Table<NurseAddress> NurseAddresses
		{
			get
			{
				return this.GetTable<NurseAddress>();
			}
		}
		
		public System.Data.Linq.Table<NurseFacility> NurseFacilities
		{
			get
			{
				return this.GetTable<NurseFacility>();
			}
		}
		
		public System.Data.Linq.Table<NurseOptOut> NurseOptOuts
		{
			get
			{
				return this.GetTable<NurseOptOut>();
			}
		}
		
		public System.Data.Linq.Table<NursePhone> NursePhones
		{
			get
			{
				return this.GetTable<NursePhone>();
			}
		}
		
		public System.Data.Linq.Table<refAddressType> refAddressTypes
		{
			get
			{
				return this.GetTable<refAddressType>();
			}
		}
		
		public System.Data.Linq.Table<refCommitteePosition> refCommitteePositions
		{
			get
			{
				return this.GetTable<refCommitteePosition>();
			}
		}
		
		public System.Data.Linq.Table<refEmployerGroup> refEmployerGroups
		{
			get
			{
				return this.GetTable<refEmployerGroup>();
			}
		}
		
		public System.Data.Linq.Table<refEmploymentStatus> refEmploymentStatus
		{
			get
			{
				return this.GetTable<refEmploymentStatus>();
			}
		}
		
		public System.Data.Linq.Table<refEmploymentType> refEmploymentTypes
		{
			get
			{
				return this.GetTable<refEmploymentType>();
			}
		}
		
		public System.Data.Linq.Table<refFacilityType> refFacilityTypes
		{
			get
			{
				return this.GetTable<refFacilityType>();
			}
		}
		
		public System.Data.Linq.Table<refGender> refGenders
		{
			get
			{
				return this.GetTable<refGender>();
			}
		}
		
		public System.Data.Linq.Table<refLocalPosition> refLocalPositions
		{
			get
			{
				return this.GetTable<refLocalPosition>();
			}
		}
		
		public System.Data.Linq.Table<refNurseDesignation> refNurseDesignations
		{
			get
			{
				return this.GetTable<refNurseDesignation>();
			}
		}
		
		public System.Data.Linq.Table<refOptOut> refOptOuts
		{
			get
			{
				return this.GetTable<refOptOut>();
			}
		}
		
		public System.Data.Linq.Table<refPhoneType> refPhoneTypes
		{
			get
			{
				return this.GetTable<refPhoneType>();
			}
		}
		
		public System.Data.Linq.Table<refTableOfficerPosition> refTableOfficerPositions
		{
			get
			{
				return this.GetTable<refTableOfficerPosition>();
			}
		}
		
		public System.Data.Linq.Table<Region> Regions
		{
			get
			{
				return this.GetTable<Region>();
			}
		}
		
		public System.Data.Linq.Table<UserProfile> UserProfiles
		{
			get
			{
				return this.GetTable<UserProfile>();
			}
		}
		
		public System.Data.Linq.Table<UserProfileRole> UserProfileRoles
		{
			get
			{
				return this.GetTable<UserProfileRole>();
			}
		}
		
		public System.Data.Linq.Table<UserRole> UserRoles
		{
			get
			{
				return this.GetTable<UserRole>();
			}
		}
		
		public System.Data.Linq.Table<VersionHistory> VersionHistories
		{
			get
			{
				return this.GetTable<VersionHistory>();
			}
		}
		
		public System.Data.Linq.Table<Phone> Phones
		{
			get
			{
				return this.GetTable<Phone>();
			}
		}
		
		public System.Data.Linq.Table<NurseCommittee> NurseCommittees
		{
			get
			{
				return this.GetTable<NurseCommittee>();
			}
		}
		
		public System.Data.Linq.Table<Nurse> Nurses
		{
			get
			{
				return this.GetTable<Nurse>();
			}
		}
		
		public System.Data.Linq.Table<Facility> Facilities
		{
			get
			{
				return this.GetTable<Facility>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetRolesForUser")]
		public ISingleResult<GetRolesForUserResult> GetRolesForUser([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] string username)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), username);
			return ((ISingleResult<GetRolesForUserResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetFacilitiesForExport")]
		public ISingleResult<GetFacilitiesForExportResult> GetFacilitiesForExport()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<GetFacilitiesForExportResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetFilledCommitteePositions")]
		public ISingleResult<GetFilledCommitteePositionsResult> GetFilledCommitteePositions([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> nurseId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), nurseId);
			return ((ISingleResult<GetFilledCommitteePositionsResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SearchUserProfiles")]
		public ISingleResult<SearchUserProfilesResult> SearchUserProfiles(
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(100)")] string username, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(100)")] string firstName, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(100)")] string lastName, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(100)")] string email, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="TinyInt")] System.Nullable<byte> designationId, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="TinyInt")] System.Nullable<byte> sectorId, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> facilityId, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="TinyInt")] System.Nullable<byte> districtId, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="TinyInt")] System.Nullable<byte> regionId, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="TinyInt")] System.Nullable<byte> committeeId, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="TinyInt")] System.Nullable<byte> positionId, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> communicationOptionId, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="TinyInt")] System.Nullable<byte> employerGroupId, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Bit")] System.Nullable<bool> facilityCasualCoverage, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Bit")] System.Nullable<bool> facilityLpnCoverage, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(1)")] string letterFilter, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Bit")] System.Nullable<bool> isAlternate, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(100)")] string line1, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(100)")] string phone, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(100)")] string employmentStatusList, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(100)")] string localPositionList, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(100)")] string tableOfficerPositionList)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), username, firstName, lastName, email, designationId, sectorId, facilityId, districtId, regionId, committeeId, positionId, communicationOptionId, employerGroupId, facilityCasualCoverage, facilityLpnCoverage, letterFilter, isAlternate, line1, phone, employmentStatusList, localPositionList, tableOfficerPositionList);
			return ((ISingleResult<SearchUserProfilesResult>)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Address")]
	public partial class Address : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private byte _addressTypeId;
		
		private string _line1;
		
		private string _line2;
		
		private string _city;
		
		private string _provinceId;
		
		private string _postalCode;
		
		private string _lastModifiedBy;
		
		private System.Nullable<System.DateTime> _lastModifiedDate;
		
		private EntitySet<FacilityAddress> _FacilityAddresses;
		
		private EntitySet<NurseAddress> _NurseAddresses;
		
		private EntityRef<refAddressType> _refAddressType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnaddressTypeIdChanging(byte value);
    partial void OnaddressTypeIdChanged();
    partial void Online1Changing(string value);
    partial void Online1Changed();
    partial void Online2Changing(string value);
    partial void Online2Changed();
    partial void OncityChanging(string value);
    partial void OncityChanged();
    partial void OnprovinceIdChanging(string value);
    partial void OnprovinceIdChanged();
    partial void OnpostalCodeChanging(string value);
    partial void OnpostalCodeChanged();
    partial void OnlastModifiedByChanging(string value);
    partial void OnlastModifiedByChanged();
    partial void OnlastModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnlastModifiedDateChanged();
    #endregion
		
		public Address()
		{
			this._FacilityAddresses = new EntitySet<FacilityAddress>(new Action<FacilityAddress>(this.attach_FacilityAddresses), new Action<FacilityAddress>(this.detach_FacilityAddresses));
			this._NurseAddresses = new EntitySet<NurseAddress>(new Action<NurseAddress>(this.attach_NurseAddresses), new Action<NurseAddress>(this.detach_NurseAddresses));
			this._refAddressType = default(EntityRef<refAddressType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_addressTypeId", DbType="TinyInt NOT NULL")]
		public byte addressTypeId
		{
			get
			{
				return this._addressTypeId;
			}
			set
			{
				if ((this._addressTypeId != value))
				{
					if (this._refAddressType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnaddressTypeIdChanging(value);
					this.SendPropertyChanging();
					this._addressTypeId = value;
					this.SendPropertyChanged("addressTypeId");
					this.OnaddressTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_line1", DbType="VarChar(200)")]
		public string line1
		{
			get
			{
				return this._line1;
			}
			set
			{
				if ((this._line1 != value))
				{
					this.Online1Changing(value);
					this.SendPropertyChanging();
					this._line1 = value;
					this.SendPropertyChanged("line1");
					this.Online1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_line2", DbType="VarChar(200)")]
		public string line2
		{
			get
			{
				return this._line2;
			}
			set
			{
				if ((this._line2 != value))
				{
					this.Online2Changing(value);
					this.SendPropertyChanging();
					this._line2 = value;
					this.SendPropertyChanged("line2");
					this.Online2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_city", DbType="VarChar(200)")]
		public string city
		{
			get
			{
				return this._city;
			}
			set
			{
				if ((this._city != value))
				{
					this.OncityChanging(value);
					this.SendPropertyChanging();
					this._city = value;
					this.SendPropertyChanged("city");
					this.OncityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_provinceId", DbType="Char(2)")]
		public string provinceId
		{
			get
			{
				return this._provinceId;
			}
			set
			{
				if ((this._provinceId != value))
				{
					this.OnprovinceIdChanging(value);
					this.SendPropertyChanging();
					this._provinceId = value;
					this.SendPropertyChanged("provinceId");
					this.OnprovinceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_postalCode", DbType="VarChar(50)")]
		public string postalCode
		{
			get
			{
				return this._postalCode;
			}
			set
			{
				if ((this._postalCode != value))
				{
					this.OnpostalCodeChanging(value);
					this.SendPropertyChanging();
					this._postalCode = value;
					this.SendPropertyChanged("postalCode");
					this.OnpostalCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastModifiedBy", DbType="VarChar(50)")]
		public string lastModifiedBy
		{
			get
			{
				return this._lastModifiedBy;
			}
			set
			{
				if ((this._lastModifiedBy != value))
				{
					this.OnlastModifiedByChanging(value);
					this.SendPropertyChanging();
					this._lastModifiedBy = value;
					this.SendPropertyChanged("lastModifiedBy");
					this.OnlastModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastModifiedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> lastModifiedDate
		{
			get
			{
				return this._lastModifiedDate;
			}
			set
			{
				if ((this._lastModifiedDate != value))
				{
					this.OnlastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._lastModifiedDate = value;
					this.SendPropertyChanged("lastModifiedDate");
					this.OnlastModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_FacilityAddress", Storage="_FacilityAddresses", ThisKey="id", OtherKey="addressId")]
		public EntitySet<FacilityAddress> FacilityAddresses
		{
			get
			{
				return this._FacilityAddresses;
			}
			set
			{
				this._FacilityAddresses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_NurseAddress", Storage="_NurseAddresses", ThisKey="id", OtherKey="addressId")]
		public EntitySet<NurseAddress> NurseAddresses
		{
			get
			{
				return this._NurseAddresses;
			}
			set
			{
				this._NurseAddresses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="refAddressType_Address", Storage="_refAddressType", ThisKey="addressTypeId", OtherKey="id", IsForeignKey=true)]
		public refAddressType refAddressType
		{
			get
			{
				return this._refAddressType.Entity;
			}
			set
			{
				refAddressType previousValue = this._refAddressType.Entity;
				if (((previousValue != value) 
							|| (this._refAddressType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._refAddressType.Entity = null;
						previousValue.Addresses.Remove(this);
					}
					this._refAddressType.Entity = value;
					if ((value != null))
					{
						value.Addresses.Add(this);
						this._addressTypeId = value.id;
					}
					else
					{
						this._addressTypeId = default(byte);
					}
					this.SendPropertyChanged("refAddressType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FacilityAddresses(FacilityAddress entity)
		{
			this.SendPropertyChanging();
			entity.Address = this;
		}
		
		private void detach_FacilityAddresses(FacilityAddress entity)
		{
			this.SendPropertyChanging();
			entity.Address = null;
		}
		
		private void attach_NurseAddresses(NurseAddress entity)
		{
			this.SendPropertyChanging();
			entity.Address = this;
		}
		
		private void detach_NurseAddresses(NurseAddress entity)
		{
			this.SendPropertyChanging();
			entity.Address = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FacilityTableOfficer")]
	public partial class FacilityTableOfficer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _facilityId;
		
		private int _nurseId;
		
		private int _positionId;
		
		private EntityRef<NurseFacility> _NurseFacility;
		
		private EntityRef<refTableOfficerPosition> _refTableOfficerPosition;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnfacilityIdChanging(int value);
    partial void OnfacilityIdChanged();
    partial void OnnurseIdChanging(int value);
    partial void OnnurseIdChanged();
    partial void OnpositionIdChanging(int value);
    partial void OnpositionIdChanged();
    #endregion
		
		public FacilityTableOfficer()
		{
			this._NurseFacility = default(EntityRef<NurseFacility>);
			this._refTableOfficerPosition = default(EntityRef<refTableOfficerPosition>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_facilityId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int facilityId
		{
			get
			{
				return this._facilityId;
			}
			set
			{
				if ((this._facilityId != value))
				{
					if (this._NurseFacility.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnfacilityIdChanging(value);
					this.SendPropertyChanging();
					this._facilityId = value;
					this.SendPropertyChanged("facilityId");
					this.OnfacilityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nurseId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int nurseId
		{
			get
			{
				return this._nurseId;
			}
			set
			{
				if ((this._nurseId != value))
				{
					if (this._NurseFacility.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnnurseIdChanging(value);
					this.SendPropertyChanging();
					this._nurseId = value;
					this.SendPropertyChanged("nurseId");
					this.OnnurseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_positionId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int positionId
		{
			get
			{
				return this._positionId;
			}
			set
			{
				if ((this._positionId != value))
				{
					if (this._refTableOfficerPosition.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpositionIdChanging(value);
					this.SendPropertyChanging();
					this._positionId = value;
					this.SendPropertyChanged("positionId");
					this.OnpositionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NurseFacility_FacilityTableOfficer", Storage="_NurseFacility", ThisKey="nurseId,facilityId", OtherKey="nurseId,facilityId", IsForeignKey=true)]
		public NurseFacility NurseFacility
		{
			get
			{
				return this._NurseFacility.Entity;
			}
			set
			{
				NurseFacility previousValue = this._NurseFacility.Entity;
				if (((previousValue != value) 
							|| (this._NurseFacility.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NurseFacility.Entity = null;
						previousValue.FacilityTableOfficers.Remove(this);
					}
					this._NurseFacility.Entity = value;
					if ((value != null))
					{
						value.FacilityTableOfficers.Add(this);
						this._nurseId = value.nurseId;
						this._facilityId = value.facilityId;
					}
					else
					{
						this._nurseId = default(int);
						this._facilityId = default(int);
					}
					this.SendPropertyChanged("NurseFacility");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="refTableOfficerPosition_FacilityTableOfficer", Storage="_refTableOfficerPosition", ThisKey="positionId", OtherKey="id", IsForeignKey=true)]
		public refTableOfficerPosition refTableOfficerPosition
		{
			get
			{
				return this._refTableOfficerPosition.Entity;
			}
			set
			{
				refTableOfficerPosition previousValue = this._refTableOfficerPosition.Entity;
				if (((previousValue != value) 
							|| (this._refTableOfficerPosition.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._refTableOfficerPosition.Entity = null;
						previousValue.FacilityTableOfficers.Remove(this);
					}
					this._refTableOfficerPosition.Entity = value;
					if ((value != null))
					{
						value.FacilityTableOfficers.Add(this);
						this._positionId = value.id;
					}
					else
					{
						this._positionId = default(int);
					}
					this.SendPropertyChanged("refTableOfficerPosition");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Committee")]
	public partial class Committee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _id;
		
		private string _committeeName;
		
		private EntitySet<CommitteePosition> _CommitteePositions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(byte value);
    partial void OnidChanged();
    partial void OncommitteeNameChanging(string value);
    partial void OncommitteeNameChanged();
    #endregion
		
		public Committee()
		{
			this._CommitteePositions = new EntitySet<CommitteePosition>(new Action<CommitteePosition>(this.attach_CommitteePositions), new Action<CommitteePosition>(this.detach_CommitteePositions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_committeeName", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string committeeName
		{
			get
			{
				return this._committeeName;
			}
			set
			{
				if ((this._committeeName != value))
				{
					this.OncommitteeNameChanging(value);
					this.SendPropertyChanging();
					this._committeeName = value;
					this.SendPropertyChanged("committeeName");
					this.OncommitteeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Committee_CommitteePosition", Storage="_CommitteePositions", ThisKey="id", OtherKey="committeeId")]
		public EntitySet<CommitteePosition> CommitteePositions
		{
			get
			{
				return this._CommitteePositions;
			}
			set
			{
				this._CommitteePositions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CommitteePositions(CommitteePosition entity)
		{
			this.SendPropertyChanging();
			entity.Committee = this;
		}
		
		private void detach_CommitteePositions(CommitteePosition entity)
		{
			this.SendPropertyChanging();
			entity.Committee = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CommitteePosition")]
	public partial class CommitteePosition : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _committeeId;
		
		private byte _positionId;
		
		private int _maxPositions;
		
		private int _maxAlternates;
		
		private EntitySet<NurseCommittee> _NurseCommittees;
		
		private EntityRef<Committee> _Committee;
		
		private EntityRef<refCommitteePosition> _refCommitteePosition;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncommitteeIdChanging(byte value);
    partial void OncommitteeIdChanged();
    partial void OnpositionIdChanging(byte value);
    partial void OnpositionIdChanged();
    partial void OnmaxPositionsChanging(int value);
    partial void OnmaxPositionsChanged();
    partial void OnmaxAlternatesChanging(int value);
    partial void OnmaxAlternatesChanged();
    #endregion
		
		public CommitteePosition()
		{
			this._NurseCommittees = new EntitySet<NurseCommittee>(new Action<NurseCommittee>(this.attach_NurseCommittees), new Action<NurseCommittee>(this.detach_NurseCommittees));
			this._Committee = default(EntityRef<Committee>);
			this._refCommitteePosition = default(EntityRef<refCommitteePosition>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_committeeId", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte committeeId
		{
			get
			{
				return this._committeeId;
			}
			set
			{
				if ((this._committeeId != value))
				{
					if (this._Committee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncommitteeIdChanging(value);
					this.SendPropertyChanging();
					this._committeeId = value;
					this.SendPropertyChanged("committeeId");
					this.OncommitteeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_positionId", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte positionId
		{
			get
			{
				return this._positionId;
			}
			set
			{
				if ((this._positionId != value))
				{
					if (this._refCommitteePosition.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpositionIdChanging(value);
					this.SendPropertyChanging();
					this._positionId = value;
					this.SendPropertyChanged("positionId");
					this.OnpositionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_maxPositions", DbType="Int NOT NULL")]
		public int maxPositions
		{
			get
			{
				return this._maxPositions;
			}
			set
			{
				if ((this._maxPositions != value))
				{
					this.OnmaxPositionsChanging(value);
					this.SendPropertyChanging();
					this._maxPositions = value;
					this.SendPropertyChanged("maxPositions");
					this.OnmaxPositionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_maxAlternates", DbType="Int NOT NULL")]
		public int maxAlternates
		{
			get
			{
				return this._maxAlternates;
			}
			set
			{
				if ((this._maxAlternates != value))
				{
					this.OnmaxAlternatesChanging(value);
					this.SendPropertyChanging();
					this._maxAlternates = value;
					this.SendPropertyChanged("maxAlternates");
					this.OnmaxAlternatesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CommitteePosition_NurseCommittee", Storage="_NurseCommittees", ThisKey="committeeId,positionId", OtherKey="committeeId,positionId")]
		public EntitySet<NurseCommittee> NurseCommittees
		{
			get
			{
				return this._NurseCommittees;
			}
			set
			{
				this._NurseCommittees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Committee_CommitteePosition", Storage="_Committee", ThisKey="committeeId", OtherKey="id", IsForeignKey=true)]
		public Committee Committee
		{
			get
			{
				return this._Committee.Entity;
			}
			set
			{
				Committee previousValue = this._Committee.Entity;
				if (((previousValue != value) 
							|| (this._Committee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Committee.Entity = null;
						previousValue.CommitteePositions.Remove(this);
					}
					this._Committee.Entity = value;
					if ((value != null))
					{
						value.CommitteePositions.Add(this);
						this._committeeId = value.id;
					}
					else
					{
						this._committeeId = default(byte);
					}
					this.SendPropertyChanged("Committee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="refCommitteePosition_CommitteePosition", Storage="_refCommitteePosition", ThisKey="positionId", OtherKey="id", IsForeignKey=true)]
		public refCommitteePosition refCommitteePosition
		{
			get
			{
				return this._refCommitteePosition.Entity;
			}
			set
			{
				refCommitteePosition previousValue = this._refCommitteePosition.Entity;
				if (((previousValue != value) 
							|| (this._refCommitteePosition.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._refCommitteePosition.Entity = null;
						previousValue.CommitteePositions.Remove(this);
					}
					this._refCommitteePosition.Entity = value;
					if ((value != null))
					{
						value.CommitteePositions.Add(this);
						this._positionId = value.id;
					}
					else
					{
						this._positionId = default(byte);
					}
					this.SendPropertyChanged("refCommitteePosition");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_NurseCommittees(NurseCommittee entity)
		{
			this.SendPropertyChanging();
			entity.CommitteePosition = this;
		}
		
		private void detach_NurseCommittees(NurseCommittee entity)
		{
			this.SendPropertyChanging();
			entity.CommitteePosition = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.District")]
	public partial class District : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _districtName;
		
		private int _regionId;
		
		private EntitySet<Facility> _Facilities;
		
		private EntityRef<Region> _Region;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OndistrictNameChanging(string value);
    partial void OndistrictNameChanged();
    partial void OnregionIdChanging(int value);
    partial void OnregionIdChanged();
    #endregion
		
		public District()
		{
			this._Facilities = new EntitySet<Facility>(new Action<Facility>(this.attach_Facilities), new Action<Facility>(this.detach_Facilities));
			this._Region = default(EntityRef<Region>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_districtName", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string districtName
		{
			get
			{
				return this._districtName;
			}
			set
			{
				if ((this._districtName != value))
				{
					this.OndistrictNameChanging(value);
					this.SendPropertyChanging();
					this._districtName = value;
					this.SendPropertyChanged("districtName");
					this.OndistrictNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_regionId", DbType="Int NOT NULL")]
		public int regionId
		{
			get
			{
				return this._regionId;
			}
			set
			{
				if ((this._regionId != value))
				{
					if (this._Region.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnregionIdChanging(value);
					this.SendPropertyChanging();
					this._regionId = value;
					this.SendPropertyChanged("regionId");
					this.OnregionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="District_Facility", Storage="_Facilities", ThisKey="id", OtherKey="districtId")]
		public EntitySet<Facility> Facilities
		{
			get
			{
				return this._Facilities;
			}
			set
			{
				this._Facilities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Region_District", Storage="_Region", ThisKey="regionId", OtherKey="id", IsForeignKey=true)]
		public Region Region
		{
			get
			{
				return this._Region.Entity;
			}
			set
			{
				Region previousValue = this._Region.Entity;
				if (((previousValue != value) 
							|| (this._Region.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Region.Entity = null;
						previousValue.Districts.Remove(this);
					}
					this._Region.Entity = value;
					if ((value != null))
					{
						value.Districts.Add(this);
						this._regionId = value.id;
					}
					else
					{
						this._regionId = default(int);
					}
					this.SendPropertyChanged("Region");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Facilities(Facility entity)
		{
			this.SendPropertyChanging();
			entity.District = this;
		}
		
		private void detach_Facilities(Facility entity)
		{
			this.SendPropertyChanging();
			entity.District = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FacilityAddress")]
	public partial class FacilityAddress : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _facilityId;
		
		private int _addressId;
		
		private EntityRef<Address> _Address;
		
		private EntityRef<Facility> _Facility;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnfacilityIdChanging(int value);
    partial void OnfacilityIdChanged();
    partial void OnaddressIdChanging(int value);
    partial void OnaddressIdChanged();
    #endregion
		
		public FacilityAddress()
		{
			this._Address = default(EntityRef<Address>);
			this._Facility = default(EntityRef<Facility>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_facilityId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int facilityId
		{
			get
			{
				return this._facilityId;
			}
			set
			{
				if ((this._facilityId != value))
				{
					if (this._Facility.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnfacilityIdChanging(value);
					this.SendPropertyChanging();
					this._facilityId = value;
					this.SendPropertyChanged("facilityId");
					this.OnfacilityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_addressId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int addressId
		{
			get
			{
				return this._addressId;
			}
			set
			{
				if ((this._addressId != value))
				{
					if (this._Address.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnaddressIdChanging(value);
					this.SendPropertyChanging();
					this._addressId = value;
					this.SendPropertyChanged("addressId");
					this.OnaddressIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_FacilityAddress", Storage="_Address", ThisKey="addressId", OtherKey="id", IsForeignKey=true)]
		public Address Address
		{
			get
			{
				return this._Address.Entity;
			}
			set
			{
				Address previousValue = this._Address.Entity;
				if (((previousValue != value) 
							|| (this._Address.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Address.Entity = null;
						previousValue.FacilityAddresses.Remove(this);
					}
					this._Address.Entity = value;
					if ((value != null))
					{
						value.FacilityAddresses.Add(this);
						this._addressId = value.id;
					}
					else
					{
						this._addressId = default(int);
					}
					this.SendPropertyChanged("Address");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Facility_FacilityAddress", Storage="_Facility", ThisKey="facilityId", OtherKey="id", IsForeignKey=true)]
		public Facility Facility
		{
			get
			{
				return this._Facility.Entity;
			}
			set
			{
				Facility previousValue = this._Facility.Entity;
				if (((previousValue != value) 
							|| (this._Facility.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Facility.Entity = null;
						previousValue.FacilityAddresses.Remove(this);
					}
					this._Facility.Entity = value;
					if ((value != null))
					{
						value.FacilityAddresses.Add(this);
						this._facilityId = value.id;
					}
					else
					{
						this._facilityId = default(int);
					}
					this.SendPropertyChanged("Facility");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FacilityLocalPosition")]
	public partial class FacilityLocalPosition : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _nurseId;
		
		private int _facilityId;
		
		private int _positionId;
		
		private EntityRef<NurseFacility> _NurseFacility;
		
		private EntityRef<refLocalPosition> _refLocalPosition;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnnurseIdChanging(int value);
    partial void OnnurseIdChanged();
    partial void OnfacilityIdChanging(int value);
    partial void OnfacilityIdChanged();
    partial void OnpositionIdChanging(int value);
    partial void OnpositionIdChanged();
    #endregion
		
		public FacilityLocalPosition()
		{
			this._NurseFacility = default(EntityRef<NurseFacility>);
			this._refLocalPosition = default(EntityRef<refLocalPosition>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nurseId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int nurseId
		{
			get
			{
				return this._nurseId;
			}
			set
			{
				if ((this._nurseId != value))
				{
					if (this._NurseFacility.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnnurseIdChanging(value);
					this.SendPropertyChanging();
					this._nurseId = value;
					this.SendPropertyChanged("nurseId");
					this.OnnurseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_facilityId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int facilityId
		{
			get
			{
				return this._facilityId;
			}
			set
			{
				if ((this._facilityId != value))
				{
					if (this._NurseFacility.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnfacilityIdChanging(value);
					this.SendPropertyChanging();
					this._facilityId = value;
					this.SendPropertyChanged("facilityId");
					this.OnfacilityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_positionId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int positionId
		{
			get
			{
				return this._positionId;
			}
			set
			{
				if ((this._positionId != value))
				{
					if (this._refLocalPosition.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpositionIdChanging(value);
					this.SendPropertyChanging();
					this._positionId = value;
					this.SendPropertyChanged("positionId");
					this.OnpositionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NurseFacility_FacilityLocalPosition", Storage="_NurseFacility", ThisKey="nurseId,facilityId", OtherKey="nurseId,facilityId", IsForeignKey=true)]
		public NurseFacility NurseFacility
		{
			get
			{
				return this._NurseFacility.Entity;
			}
			set
			{
				NurseFacility previousValue = this._NurseFacility.Entity;
				if (((previousValue != value) 
							|| (this._NurseFacility.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NurseFacility.Entity = null;
						previousValue.FacilityLocalPositions.Remove(this);
					}
					this._NurseFacility.Entity = value;
					if ((value != null))
					{
						value.FacilityLocalPositions.Add(this);
						this._nurseId = value.nurseId;
						this._facilityId = value.facilityId;
					}
					else
					{
						this._nurseId = default(int);
						this._facilityId = default(int);
					}
					this.SendPropertyChanged("NurseFacility");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="refLocalPosition_FacilityLocalPosition", Storage="_refLocalPosition", ThisKey="positionId", OtherKey="id", IsForeignKey=true)]
		public refLocalPosition refLocalPosition
		{
			get
			{
				return this._refLocalPosition.Entity;
			}
			set
			{
				refLocalPosition previousValue = this._refLocalPosition.Entity;
				if (((previousValue != value) 
							|| (this._refLocalPosition.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._refLocalPosition.Entity = null;
						previousValue.FacilityLocalPositions.Remove(this);
					}
					this._refLocalPosition.Entity = value;
					if ((value != null))
					{
						value.FacilityLocalPositions.Add(this);
						this._positionId = value.id;
					}
					else
					{
						this._positionId = default(int);
					}
					this.SendPropertyChanged("refLocalPosition");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FacilityPhone")]
	public partial class FacilityPhone : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _facilityId;
		
		private int _phoneId;
		
		private EntityRef<Phone> _Phone;
		
		private EntityRef<Facility> _Facility;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnfacilityIdChanging(int value);
    partial void OnfacilityIdChanged();
    partial void OnphoneIdChanging(int value);
    partial void OnphoneIdChanged();
    #endregion
		
		public FacilityPhone()
		{
			this._Phone = default(EntityRef<Phone>);
			this._Facility = default(EntityRef<Facility>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_facilityId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int facilityId
		{
			get
			{
				return this._facilityId;
			}
			set
			{
				if ((this._facilityId != value))
				{
					if (this._Facility.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnfacilityIdChanging(value);
					this.SendPropertyChanging();
					this._facilityId = value;
					this.SendPropertyChanged("facilityId");
					this.OnfacilityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phoneId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int phoneId
		{
			get
			{
				return this._phoneId;
			}
			set
			{
				if ((this._phoneId != value))
				{
					if (this._Phone.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnphoneIdChanging(value);
					this.SendPropertyChanging();
					this._phoneId = value;
					this.SendPropertyChanged("phoneId");
					this.OnphoneIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Phone_FacilityPhone", Storage="_Phone", ThisKey="phoneId", OtherKey="id", IsForeignKey=true)]
		public Phone Phone
		{
			get
			{
				return this._Phone.Entity;
			}
			set
			{
				Phone previousValue = this._Phone.Entity;
				if (((previousValue != value) 
							|| (this._Phone.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Phone.Entity = null;
						previousValue.FacilityPhones.Remove(this);
					}
					this._Phone.Entity = value;
					if ((value != null))
					{
						value.FacilityPhones.Add(this);
						this._phoneId = value.id;
					}
					else
					{
						this._phoneId = default(int);
					}
					this.SendPropertyChanged("Phone");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Facility_FacilityPhone", Storage="_Facility", ThisKey="facilityId", OtherKey="id", IsForeignKey=true)]
		public Facility Facility
		{
			get
			{
				return this._Facility.Entity;
			}
			set
			{
				Facility previousValue = this._Facility.Entity;
				if (((previousValue != value) 
							|| (this._Facility.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Facility.Entity = null;
						previousValue.FacilityPhones.Remove(this);
					}
					this._Facility.Entity = value;
					if ((value != null))
					{
						value.FacilityPhones.Add(this);
						this._facilityId = value.id;
					}
					else
					{
						this._facilityId = default(int);
					}
					this.SendPropertyChanged("Facility");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LabourRepresentative")]
	public partial class LabourRepresentative : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _firstName;
		
		private string _lastName;
		
		private EntitySet<Facility> _Facilities;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnfirstNameChanging(string value);
    partial void OnfirstNameChanged();
    partial void OnlastNameChanging(string value);
    partial void OnlastNameChanged();
    #endregion
		
		public LabourRepresentative()
		{
			this._Facilities = new EntitySet<Facility>(new Action<Facility>(this.attach_Facilities), new Action<Facility>(this.detach_Facilities));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_firstName", DbType="VarChar(100)")]
		public string firstName
		{
			get
			{
				return this._firstName;
			}
			set
			{
				if ((this._firstName != value))
				{
					this.OnfirstNameChanging(value);
					this.SendPropertyChanging();
					this._firstName = value;
					this.SendPropertyChanged("firstName");
					this.OnfirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastName", DbType="VarChar(100)")]
		public string lastName
		{
			get
			{
				return this._lastName;
			}
			set
			{
				if ((this._lastName != value))
				{
					this.OnlastNameChanging(value);
					this.SendPropertyChanging();
					this._lastName = value;
					this.SendPropertyChanged("lastName");
					this.OnlastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LabourRepresentative_Facility", Storage="_Facilities", ThisKey="id", OtherKey="labourRepId")]
		public EntitySet<Facility> Facilities
		{
			get
			{
				return this._Facilities;
			}
			set
			{
				this._Facilities.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Facilities(Facility entity)
		{
			this.SendPropertyChanging();
			entity.LabourRepresentative = this;
		}
		
		private void detach_Facilities(Facility entity)
		{
			this.SendPropertyChanging();
			entity.LabourRepresentative = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Note")]
	public partial class Note : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _nurseId;
		
		private string _noteBody;
		
		private System.DateTime _creationDate;
		
		private string _createdBy;
		
		private EntityRef<Nurse> _Nurse;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnurseIdChanging(int value);
    partial void OnnurseIdChanged();
    partial void OnnoteBodyChanging(string value);
    partial void OnnoteBodyChanged();
    partial void OncreationDateChanging(System.DateTime value);
    partial void OncreationDateChanged();
    partial void OncreatedByChanging(string value);
    partial void OncreatedByChanged();
    #endregion
		
		public Note()
		{
			this._Nurse = default(EntityRef<Nurse>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nurseId", DbType="Int NOT NULL")]
		public int nurseId
		{
			get
			{
				return this._nurseId;
			}
			set
			{
				if ((this._nurseId != value))
				{
					if (this._Nurse.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnnurseIdChanging(value);
					this.SendPropertyChanging();
					this._nurseId = value;
					this.SendPropertyChanged("nurseId");
					this.OnnurseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_noteBody", DbType="VarChar(2000) NOT NULL", CanBeNull=false)]
		public string noteBody
		{
			get
			{
				return this._noteBody;
			}
			set
			{
				if ((this._noteBody != value))
				{
					this.OnnoteBodyChanging(value);
					this.SendPropertyChanging();
					this._noteBody = value;
					this.SendPropertyChanged("noteBody");
					this.OnnoteBodyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_creationDate", DbType="DateTime NOT NULL")]
		public System.DateTime creationDate
		{
			get
			{
				return this._creationDate;
			}
			set
			{
				if ((this._creationDate != value))
				{
					this.OncreationDateChanging(value);
					this.SendPropertyChanging();
					this._creationDate = value;
					this.SendPropertyChanged("creationDate");
					this.OncreationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_createdBy", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string createdBy
		{
			get
			{
				return this._createdBy;
			}
			set
			{
				if ((this._createdBy != value))
				{
					this.OncreatedByChanging(value);
					this.SendPropertyChanging();
					this._createdBy = value;
					this.SendPropertyChanged("createdBy");
					this.OncreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Nurse_Note", Storage="_Nurse", ThisKey="nurseId", OtherKey="userId", IsForeignKey=true)]
		public Nurse Nurse
		{
			get
			{
				return this._Nurse.Entity;
			}
			set
			{
				Nurse previousValue = this._Nurse.Entity;
				if (((previousValue != value) 
							|| (this._Nurse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Nurse.Entity = null;
						previousValue.Notes.Remove(this);
					}
					this._Nurse.Entity = value;
					if ((value != null))
					{
						value.Notes.Add(this);
						this._nurseId = value.userId;
					}
					else
					{
						this._nurseId = default(int);
					}
					this.SendPropertyChanged("Nurse");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NurseAddress")]
	public partial class NurseAddress : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _nurseId;
		
		private int _addressId;
		
		private EntityRef<Address> _Address;
		
		private EntityRef<Nurse> _Nurse;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnnurseIdChanging(int value);
    partial void OnnurseIdChanged();
    partial void OnaddressIdChanging(int value);
    partial void OnaddressIdChanged();
    #endregion
		
		public NurseAddress()
		{
			this._Address = default(EntityRef<Address>);
			this._Nurse = default(EntityRef<Nurse>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nurseId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int nurseId
		{
			get
			{
				return this._nurseId;
			}
			set
			{
				if ((this._nurseId != value))
				{
					if (this._Nurse.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnnurseIdChanging(value);
					this.SendPropertyChanging();
					this._nurseId = value;
					this.SendPropertyChanged("nurseId");
					this.OnnurseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_addressId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int addressId
		{
			get
			{
				return this._addressId;
			}
			set
			{
				if ((this._addressId != value))
				{
					if (this._Address.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnaddressIdChanging(value);
					this.SendPropertyChanging();
					this._addressId = value;
					this.SendPropertyChanged("addressId");
					this.OnaddressIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_NurseAddress", Storage="_Address", ThisKey="addressId", OtherKey="id", IsForeignKey=true)]
		public Address Address
		{
			get
			{
				return this._Address.Entity;
			}
			set
			{
				Address previousValue = this._Address.Entity;
				if (((previousValue != value) 
							|| (this._Address.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Address.Entity = null;
						previousValue.NurseAddresses.Remove(this);
					}
					this._Address.Entity = value;
					if ((value != null))
					{
						value.NurseAddresses.Add(this);
						this._addressId = value.id;
					}
					else
					{
						this._addressId = default(int);
					}
					this.SendPropertyChanged("Address");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Nurse_NurseAddress", Storage="_Nurse", ThisKey="nurseId", OtherKey="userId", IsForeignKey=true)]
		public Nurse Nurse
		{
			get
			{
				return this._Nurse.Entity;
			}
			set
			{
				Nurse previousValue = this._Nurse.Entity;
				if (((previousValue != value) 
							|| (this._Nurse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Nurse.Entity = null;
						previousValue.NurseAddresses.Remove(this);
					}
					this._Nurse.Entity = value;
					if ((value != null))
					{
						value.NurseAddresses.Add(this);
						this._nurseId = value.userId;
					}
					else
					{
						this._nurseId = default(int);
					}
					this.SendPropertyChanged("Nurse");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NurseFacility")]
	public partial class NurseFacility : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _nurseId;
		
		private int _facilityId;
		
		private System.Nullable<byte> _employmentTypeId;
		
		private byte _priority;
		
		private EntitySet<FacilityTableOfficer> _FacilityTableOfficers;
		
		private EntitySet<FacilityLocalPosition> _FacilityLocalPositions;
		
		private EntityRef<refEmploymentType> _refEmploymentType;
		
		private EntityRef<Nurse> _Nurse;
		
		private EntityRef<Facility> _Facility;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnnurseIdChanging(int value);
    partial void OnnurseIdChanged();
    partial void OnfacilityIdChanging(int value);
    partial void OnfacilityIdChanged();
    partial void OnemploymentTypeIdChanging(System.Nullable<byte> value);
    partial void OnemploymentTypeIdChanged();
    partial void OnpriorityChanging(byte value);
    partial void OnpriorityChanged();
    #endregion
		
		public NurseFacility()
		{
			this._FacilityTableOfficers = new EntitySet<FacilityTableOfficer>(new Action<FacilityTableOfficer>(this.attach_FacilityTableOfficers), new Action<FacilityTableOfficer>(this.detach_FacilityTableOfficers));
			this._FacilityLocalPositions = new EntitySet<FacilityLocalPosition>(new Action<FacilityLocalPosition>(this.attach_FacilityLocalPositions), new Action<FacilityLocalPosition>(this.detach_FacilityLocalPositions));
			this._refEmploymentType = default(EntityRef<refEmploymentType>);
			this._Nurse = default(EntityRef<Nurse>);
			this._Facility = default(EntityRef<Facility>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nurseId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int nurseId
		{
			get
			{
				return this._nurseId;
			}
			set
			{
				if ((this._nurseId != value))
				{
					if (this._Nurse.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnnurseIdChanging(value);
					this.SendPropertyChanging();
					this._nurseId = value;
					this.SendPropertyChanged("nurseId");
					this.OnnurseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_facilityId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int facilityId
		{
			get
			{
				return this._facilityId;
			}
			set
			{
				if ((this._facilityId != value))
				{
					if (this._Facility.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnfacilityIdChanging(value);
					this.SendPropertyChanging();
					this._facilityId = value;
					this.SendPropertyChanged("facilityId");
					this.OnfacilityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_employmentTypeId", DbType="TinyInt NULL")]
		public System.Nullable<byte> employmentTypeId
		{
			get
			{
				return this._employmentTypeId;
			}
			set
			{
				if ((this._employmentTypeId != value))
				{
					if (this._refEmploymentType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnemploymentTypeIdChanging(value);
					this.SendPropertyChanging();
					this._employmentTypeId = value;
					this.SendPropertyChanged("employmentTypeId");
					this.OnemploymentTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_priority", DbType="TinyInt NOT NULL")]
		public byte priority
		{
			get
			{
				return this._priority;
			}
			set
			{
				if ((this._priority != value))
				{
					this.OnpriorityChanging(value);
					this.SendPropertyChanging();
					this._priority = value;
					this.SendPropertyChanged("priority");
					this.OnpriorityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NurseFacility_FacilityTableOfficer", Storage="_FacilityTableOfficers", ThisKey="nurseId,facilityId", OtherKey="nurseId,facilityId")]
		public EntitySet<FacilityTableOfficer> FacilityTableOfficers
		{
			get
			{
				return this._FacilityTableOfficers;
			}
			set
			{
				this._FacilityTableOfficers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NurseFacility_FacilityLocalPosition", Storage="_FacilityLocalPositions", ThisKey="nurseId,facilityId", OtherKey="nurseId,facilityId")]
		public EntitySet<FacilityLocalPosition> FacilityLocalPositions
		{
			get
			{
				return this._FacilityLocalPositions;
			}
			set
			{
				this._FacilityLocalPositions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="refEmploymentType_NurseFacility", Storage="_refEmploymentType", ThisKey="employmentTypeId", OtherKey="id", IsForeignKey=true)]
		public refEmploymentType refEmploymentType
		{
			get
			{
				return this._refEmploymentType.Entity;
			}
			set
			{
				refEmploymentType previousValue = this._refEmploymentType.Entity;
				if (((previousValue != value) 
							|| (this._refEmploymentType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._refEmploymentType.Entity = null;
						previousValue.NurseFacilities.Remove(this);
					}
					this._refEmploymentType.Entity = value;
					if ((value != null))
					{
						value.NurseFacilities.Add(this);
						this._employmentTypeId = value.id;
					}
					else
					{
						this._employmentTypeId = default(Nullable<byte>);
					}
					this.SendPropertyChanged("refEmploymentType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Nurse_NurseFacility", Storage="_Nurse", ThisKey="nurseId", OtherKey="userId", IsForeignKey=true)]
		public Nurse Nurse
		{
			get
			{
				return this._Nurse.Entity;
			}
			set
			{
				Nurse previousValue = this._Nurse.Entity;
				if (((previousValue != value) 
							|| (this._Nurse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Nurse.Entity = null;
						previousValue.NurseFacilities.Remove(this);
					}
					this._Nurse.Entity = value;
					if ((value != null))
					{
						value.NurseFacilities.Add(this);
						this._nurseId = value.userId;
					}
					else
					{
						this._nurseId = default(int);
					}
					this.SendPropertyChanged("Nurse");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Facility_NurseFacility", Storage="_Facility", ThisKey="facilityId", OtherKey="id", IsForeignKey=true)]
		public Facility Facility
		{
			get
			{
				return this._Facility.Entity;
			}
			set
			{
				Facility previousValue = this._Facility.Entity;
				if (((previousValue != value) 
							|| (this._Facility.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Facility.Entity = null;
						previousValue.NurseFacilities.Remove(this);
					}
					this._Facility.Entity = value;
					if ((value != null))
					{
						value.NurseFacilities.Add(this);
						this._facilityId = value.id;
					}
					else
					{
						this._facilityId = default(int);
					}
					this.SendPropertyChanged("Facility");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FacilityTableOfficers(FacilityTableOfficer entity)
		{
			this.SendPropertyChanging();
			entity.NurseFacility = this;
		}
		
		private void detach_FacilityTableOfficers(FacilityTableOfficer entity)
		{
			this.SendPropertyChanging();
			entity.NurseFacility = null;
		}
		
		private void attach_FacilityLocalPositions(FacilityLocalPosition entity)
		{
			this.SendPropertyChanging();
			entity.NurseFacility = this;
		}
		
		private void detach_FacilityLocalPositions(FacilityLocalPosition entity)
		{
			this.SendPropertyChanging();
			entity.NurseFacility = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NurseOptOut")]
	public partial class NurseOptOut : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _nurseId;
		
		private int _optOutId;
		
		private EntityRef<refOptOut> _refOptOut;
		
		private EntityRef<Nurse> _Nurse;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnnurseIdChanging(int value);
    partial void OnnurseIdChanged();
    partial void OnoptOutIdChanging(int value);
    partial void OnoptOutIdChanged();
    #endregion
		
		public NurseOptOut()
		{
			this._refOptOut = default(EntityRef<refOptOut>);
			this._Nurse = default(EntityRef<Nurse>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nurseId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int nurseId
		{
			get
			{
				return this._nurseId;
			}
			set
			{
				if ((this._nurseId != value))
				{
					if (this._Nurse.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnnurseIdChanging(value);
					this.SendPropertyChanging();
					this._nurseId = value;
					this.SendPropertyChanged("nurseId");
					this.OnnurseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_optOutId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int optOutId
		{
			get
			{
				return this._optOutId;
			}
			set
			{
				if ((this._optOutId != value))
				{
					if (this._refOptOut.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnoptOutIdChanging(value);
					this.SendPropertyChanging();
					this._optOutId = value;
					this.SendPropertyChanged("optOutId");
					this.OnoptOutIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="refOptOut_NurseOptOut", Storage="_refOptOut", ThisKey="optOutId", OtherKey="id", IsForeignKey=true)]
		public refOptOut refOptOut
		{
			get
			{
				return this._refOptOut.Entity;
			}
			set
			{
				refOptOut previousValue = this._refOptOut.Entity;
				if (((previousValue != value) 
							|| (this._refOptOut.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._refOptOut.Entity = null;
						previousValue.NurseOptOuts.Remove(this);
					}
					this._refOptOut.Entity = value;
					if ((value != null))
					{
						value.NurseOptOuts.Add(this);
						this._optOutId = value.id;
					}
					else
					{
						this._optOutId = default(int);
					}
					this.SendPropertyChanged("refOptOut");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Nurse_NurseOptOut", Storage="_Nurse", ThisKey="nurseId", OtherKey="userId", IsForeignKey=true)]
		public Nurse Nurse
		{
			get
			{
				return this._Nurse.Entity;
			}
			set
			{
				Nurse previousValue = this._Nurse.Entity;
				if (((previousValue != value) 
							|| (this._Nurse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Nurse.Entity = null;
						previousValue.NurseOptOuts.Remove(this);
					}
					this._Nurse.Entity = value;
					if ((value != null))
					{
						value.NurseOptOuts.Add(this);
						this._nurseId = value.userId;
					}
					else
					{
						this._nurseId = default(int);
					}
					this.SendPropertyChanged("Nurse");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NursePhone")]
	public partial class NursePhone : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _userId;
		
		private int _phoneId;
		
		private EntityRef<Phone> _Phone;
		
		private EntityRef<Nurse> _Nurse;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuserIdChanging(int value);
    partial void OnuserIdChanged();
    partial void OnphoneIdChanging(int value);
    partial void OnphoneIdChanged();
    #endregion
		
		public NursePhone()
		{
			this._Phone = default(EntityRef<Phone>);
			this._Nurse = default(EntityRef<Nurse>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int userId
		{
			get
			{
				return this._userId;
			}
			set
			{
				if ((this._userId != value))
				{
					if (this._Nurse.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIdChanging(value);
					this.SendPropertyChanging();
					this._userId = value;
					this.SendPropertyChanged("userId");
					this.OnuserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phoneId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int phoneId
		{
			get
			{
				return this._phoneId;
			}
			set
			{
				if ((this._phoneId != value))
				{
					if (this._Phone.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnphoneIdChanging(value);
					this.SendPropertyChanging();
					this._phoneId = value;
					this.SendPropertyChanged("phoneId");
					this.OnphoneIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Phone_NursePhone", Storage="_Phone", ThisKey="phoneId", OtherKey="id", IsForeignKey=true)]
		public Phone Phone
		{
			get
			{
				return this._Phone.Entity;
			}
			set
			{
				Phone previousValue = this._Phone.Entity;
				if (((previousValue != value) 
							|| (this._Phone.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Phone.Entity = null;
						previousValue.NursePhones.Remove(this);
					}
					this._Phone.Entity = value;
					if ((value != null))
					{
						value.NursePhones.Add(this);
						this._phoneId = value.id;
					}
					else
					{
						this._phoneId = default(int);
					}
					this.SendPropertyChanged("Phone");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Nurse_NursePhone", Storage="_Nurse", ThisKey="userId", OtherKey="userId", IsForeignKey=true)]
		public Nurse Nurse
		{
			get
			{
				return this._Nurse.Entity;
			}
			set
			{
				Nurse previousValue = this._Nurse.Entity;
				if (((previousValue != value) 
							|| (this._Nurse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Nurse.Entity = null;
						previousValue.NursePhones.Remove(this);
					}
					this._Nurse.Entity = value;
					if ((value != null))
					{
						value.NursePhones.Add(this);
						this._userId = value.userId;
					}
					else
					{
						this._userId = default(int);
					}
					this.SendPropertyChanged("Nurse");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.refAddressType")]
	public partial class refAddressType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _id;
		
		private string _addressTypeName;
		
		private EntitySet<Address> _Addresses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(byte value);
    partial void OnidChanged();
    partial void OnaddressTypeNameChanging(string value);
    partial void OnaddressTypeNameChanged();
    #endregion
		
		public refAddressType()
		{
			this._Addresses = new EntitySet<Address>(new Action<Address>(this.attach_Addresses), new Action<Address>(this.detach_Addresses));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_addressTypeName", DbType="VarChar(50)")]
		public string addressTypeName
		{
			get
			{
				return this._addressTypeName;
			}
			set
			{
				if ((this._addressTypeName != value))
				{
					this.OnaddressTypeNameChanging(value);
					this.SendPropertyChanging();
					this._addressTypeName = value;
					this.SendPropertyChanged("addressTypeName");
					this.OnaddressTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="refAddressType_Address", Storage="_Addresses", ThisKey="id", OtherKey="addressTypeId")]
		public EntitySet<Address> Addresses
		{
			get
			{
				return this._Addresses;
			}
			set
			{
				this._Addresses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.refAddressType = this;
		}
		
		private void detach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.refAddressType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.refCommitteePosition")]
	public partial class refCommitteePosition : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _id;
		
		private string _positionName;
		
		private EntitySet<CommitteePosition> _CommitteePositions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(byte value);
    partial void OnidChanged();
    partial void OnpositionNameChanging(string value);
    partial void OnpositionNameChanged();
    #endregion
		
		public refCommitteePosition()
		{
			this._CommitteePositions = new EntitySet<CommitteePosition>(new Action<CommitteePosition>(this.attach_CommitteePositions), new Action<CommitteePosition>(this.detach_CommitteePositions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_positionName", DbType="VarChar(50)")]
		public string positionName
		{
			get
			{
				return this._positionName;
			}
			set
			{
				if ((this._positionName != value))
				{
					this.OnpositionNameChanging(value);
					this.SendPropertyChanging();
					this._positionName = value;
					this.SendPropertyChanged("positionName");
					this.OnpositionNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="refCommitteePosition_CommitteePosition", Storage="_CommitteePositions", ThisKey="id", OtherKey="positionId")]
		public EntitySet<CommitteePosition> CommitteePositions
		{
			get
			{
				return this._CommitteePositions;
			}
			set
			{
				this._CommitteePositions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CommitteePositions(CommitteePosition entity)
		{
			this.SendPropertyChanging();
			entity.refCommitteePosition = this;
		}
		
		private void detach_CommitteePositions(CommitteePosition entity)
		{
			this.SendPropertyChanging();
			entity.refCommitteePosition = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.refEmployerGroup")]
	public partial class refEmployerGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _id;
		
		private string _employerGroupName;
		
		private EntitySet<Facility> _Facilities;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(byte value);
    partial void OnidChanged();
    partial void OnemployerGroupNameChanging(string value);
    partial void OnemployerGroupNameChanged();
    #endregion
		
		public refEmployerGroup()
		{
			this._Facilities = new EntitySet<Facility>(new Action<Facility>(this.attach_Facilities), new Action<Facility>(this.detach_Facilities));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_employerGroupName", DbType="VarChar(100)")]
		public string employerGroupName
		{
			get
			{
				return this._employerGroupName;
			}
			set
			{
				if ((this._employerGroupName != value))
				{
					this.OnemployerGroupNameChanging(value);
					this.SendPropertyChanging();
					this._employerGroupName = value;
					this.SendPropertyChanged("employerGroupName");
					this.OnemployerGroupNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="refEmployerGroup_Facility", Storage="_Facilities", ThisKey="id", OtherKey="employerGroupId")]
		public EntitySet<Facility> Facilities
		{
			get
			{
				return this._Facilities;
			}
			set
			{
				this._Facilities.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Facilities(Facility entity)
		{
			this.SendPropertyChanging();
			entity.refEmployerGroup = this;
		}
		
		private void detach_Facilities(Facility entity)
		{
			this.SendPropertyChanging();
			entity.refEmployerGroup = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.refEmploymentStatus")]
	public partial class refEmploymentStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _id;
		
		private string _employmentStatusName;
		
		private EntitySet<Nurse> _Nurses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(byte value);
    partial void OnidChanged();
    partial void OnemploymentStatusNameChanging(string value);
    partial void OnemploymentStatusNameChanged();
    #endregion
		
		public refEmploymentStatus()
		{
			this._Nurses = new EntitySet<Nurse>(new Action<Nurse>(this.attach_Nurses), new Action<Nurse>(this.detach_Nurses));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_employmentStatusName", DbType="VarChar(100)")]
		public string employmentStatusName
		{
			get
			{
				return this._employmentStatusName;
			}
			set
			{
				if ((this._employmentStatusName != value))
				{
					this.OnemploymentStatusNameChanging(value);
					this.SendPropertyChanging();
					this._employmentStatusName = value;
					this.SendPropertyChanged("employmentStatusName");
					this.OnemploymentStatusNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="refEmploymentStatus_Nurse", Storage="_Nurses", ThisKey="id", OtherKey="employmentStatusId")]
		public EntitySet<Nurse> Nurses
		{
			get
			{
				return this._Nurses;
			}
			set
			{
				this._Nurses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Nurses(Nurse entity)
		{
			this.SendPropertyChanging();
			entity.refEmploymentStatus = this;
		}
		
		private void detach_Nurses(Nurse entity)
		{
			this.SendPropertyChanging();
			entity.refEmploymentStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.refEmploymentType")]
	public partial class refEmploymentType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _id;
		
		private string _employmentTypeName;
		
		private EntitySet<NurseFacility> _NurseFacilities;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(byte value);
    partial void OnidChanged();
    partial void OnemploymentTypeNameChanging(string value);
    partial void OnemploymentTypeNameChanged();
    #endregion
		
		public refEmploymentType()
		{
			this._NurseFacilities = new EntitySet<NurseFacility>(new Action<NurseFacility>(this.attach_NurseFacilities), new Action<NurseFacility>(this.detach_NurseFacilities));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_employmentTypeName", DbType="VarChar(100)")]
		public string employmentTypeName
		{
			get
			{
				return this._employmentTypeName;
			}
			set
			{
				if ((this._employmentTypeName != value))
				{
					this.OnemploymentTypeNameChanging(value);
					this.SendPropertyChanging();
					this._employmentTypeName = value;
					this.SendPropertyChanged("employmentTypeName");
					this.OnemploymentTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="refEmploymentType_NurseFacility", Storage="_NurseFacilities", ThisKey="id", OtherKey="employmentTypeId")]
		public EntitySet<NurseFacility> NurseFacilities
		{
			get
			{
				return this._NurseFacilities;
			}
			set
			{
				this._NurseFacilities.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_NurseFacilities(NurseFacility entity)
		{
			this.SendPropertyChanging();
			entity.refEmploymentType = this;
		}
		
		private void detach_NurseFacilities(NurseFacility entity)
		{
			this.SendPropertyChanging();
			entity.refEmploymentType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.refFacilityType")]
	public partial class refFacilityType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _id;
		
		private string _facilityTypeName;
		
		private EntitySet<Facility> _Facilities;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(byte value);
    partial void OnidChanged();
    partial void OnfacilityTypeNameChanging(string value);
    partial void OnfacilityTypeNameChanged();
    #endregion
		
		public refFacilityType()
		{
			this._Facilities = new EntitySet<Facility>(new Action<Facility>(this.attach_Facilities), new Action<Facility>(this.detach_Facilities));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_facilityTypeName", DbType="VarChar(100)")]
		public string facilityTypeName
		{
			get
			{
				return this._facilityTypeName;
			}
			set
			{
				if ((this._facilityTypeName != value))
				{
					this.OnfacilityTypeNameChanging(value);
					this.SendPropertyChanging();
					this._facilityTypeName = value;
					this.SendPropertyChanged("facilityTypeName");
					this.OnfacilityTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="refFacilityType_Facility", Storage="_Facilities", ThisKey="id", OtherKey="facilityTypeId")]
		public EntitySet<Facility> Facilities
		{
			get
			{
				return this._Facilities;
			}
			set
			{
				this._Facilities.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Facilities(Facility entity)
		{
			this.SendPropertyChanging();
			entity.refFacilityType = this;
		}
		
		private void detach_Facilities(Facility entity)
		{
			this.SendPropertyChanging();
			entity.refFacilityType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.refGender")]
	public partial class refGender : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _id;
		
		private string _genderName;
		
		private EntitySet<Nurse> _Nurses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(byte value);
    partial void OnidChanged();
    partial void OngenderNameChanging(string value);
    partial void OngenderNameChanged();
    #endregion
		
		public refGender()
		{
			this._Nurses = new EntitySet<Nurse>(new Action<Nurse>(this.attach_Nurses), new Action<Nurse>(this.detach_Nurses));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_genderName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string genderName
		{
			get
			{
				return this._genderName;
			}
			set
			{
				if ((this._genderName != value))
				{
					this.OngenderNameChanging(value);
					this.SendPropertyChanging();
					this._genderName = value;
					this.SendPropertyChanged("genderName");
					this.OngenderNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="refGender_Nurse", Storage="_Nurses", ThisKey="id", OtherKey="genderId")]
		public EntitySet<Nurse> Nurses
		{
			get
			{
				return this._Nurses;
			}
			set
			{
				this._Nurses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Nurses(Nurse entity)
		{
			this.SendPropertyChanging();
			entity.refGender = this;
		}
		
		private void detach_Nurses(Nurse entity)
		{
			this.SendPropertyChanging();
			entity.refGender = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.refLocalPosition")]
	public partial class refLocalPosition : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _positionName;
		
		private EntitySet<FacilityLocalPosition> _FacilityLocalPositions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnpositionNameChanging(string value);
    partial void OnpositionNameChanged();
    #endregion
		
		public refLocalPosition()
		{
			this._FacilityLocalPositions = new EntitySet<FacilityLocalPosition>(new Action<FacilityLocalPosition>(this.attach_FacilityLocalPositions), new Action<FacilityLocalPosition>(this.detach_FacilityLocalPositions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_positionName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string positionName
		{
			get
			{
				return this._positionName;
			}
			set
			{
				if ((this._positionName != value))
				{
					this.OnpositionNameChanging(value);
					this.SendPropertyChanging();
					this._positionName = value;
					this.SendPropertyChanged("positionName");
					this.OnpositionNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="refLocalPosition_FacilityLocalPosition", Storage="_FacilityLocalPositions", ThisKey="id", OtherKey="positionId")]
		public EntitySet<FacilityLocalPosition> FacilityLocalPositions
		{
			get
			{
				return this._FacilityLocalPositions;
			}
			set
			{
				this._FacilityLocalPositions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FacilityLocalPositions(FacilityLocalPosition entity)
		{
			this.SendPropertyChanging();
			entity.refLocalPosition = this;
		}
		
		private void detach_FacilityLocalPositions(FacilityLocalPosition entity)
		{
			this.SendPropertyChanging();
			entity.refLocalPosition = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.refNurseDesignation")]
	public partial class refNurseDesignation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _id;
		
		private string _nurseDesignationName;
		
		private EntitySet<Nurse> _Nurses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(byte value);
    partial void OnidChanged();
    partial void OnnurseDesignationNameChanging(string value);
    partial void OnnurseDesignationNameChanged();
    #endregion
		
		public refNurseDesignation()
		{
			this._Nurses = new EntitySet<Nurse>(new Action<Nurse>(this.attach_Nurses), new Action<Nurse>(this.detach_Nurses));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nurseDesignationName", DbType="VarChar(100)")]
		public string nurseDesignationName
		{
			get
			{
				return this._nurseDesignationName;
			}
			set
			{
				if ((this._nurseDesignationName != value))
				{
					this.OnnurseDesignationNameChanging(value);
					this.SendPropertyChanging();
					this._nurseDesignationName = value;
					this.SendPropertyChanged("nurseDesignationName");
					this.OnnurseDesignationNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="refNurseDesignation_Nurse", Storage="_Nurses", ThisKey="id", OtherKey="nurseDesignationId")]
		public EntitySet<Nurse> Nurses
		{
			get
			{
				return this._Nurses;
			}
			set
			{
				this._Nurses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Nurses(Nurse entity)
		{
			this.SendPropertyChanging();
			entity.refNurseDesignation = this;
		}
		
		private void detach_Nurses(Nurse entity)
		{
			this.SendPropertyChanging();
			entity.refNurseDesignation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.refOptOut")]
	public partial class refOptOut : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _optOutName;
		
		private EntitySet<NurseOptOut> _NurseOptOuts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnoptOutNameChanging(string value);
    partial void OnoptOutNameChanged();
    #endregion
		
		public refOptOut()
		{
			this._NurseOptOuts = new EntitySet<NurseOptOut>(new Action<NurseOptOut>(this.attach_NurseOptOuts), new Action<NurseOptOut>(this.detach_NurseOptOuts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_optOutName", DbType="VarChar(100)")]
		public string optOutName
		{
			get
			{
				return this._optOutName;
			}
			set
			{
				if ((this._optOutName != value))
				{
					this.OnoptOutNameChanging(value);
					this.SendPropertyChanging();
					this._optOutName = value;
					this.SendPropertyChanged("optOutName");
					this.OnoptOutNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="refOptOut_NurseOptOut", Storage="_NurseOptOuts", ThisKey="id", OtherKey="optOutId")]
		public EntitySet<NurseOptOut> NurseOptOuts
		{
			get
			{
				return this._NurseOptOuts;
			}
			set
			{
				this._NurseOptOuts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_NurseOptOuts(NurseOptOut entity)
		{
			this.SendPropertyChanging();
			entity.refOptOut = this;
		}
		
		private void detach_NurseOptOuts(NurseOptOut entity)
		{
			this.SendPropertyChanging();
			entity.refOptOut = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.refPhoneType")]
	public partial class refPhoneType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _id;
		
		private string _phoneTypeName;
		
		private EntitySet<Phone> _Phones;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(byte value);
    partial void OnidChanged();
    partial void OnphoneTypeNameChanging(string value);
    partial void OnphoneTypeNameChanged();
    #endregion
		
		public refPhoneType()
		{
			this._Phones = new EntitySet<Phone>(new Action<Phone>(this.attach_Phones), new Action<Phone>(this.detach_Phones));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phoneTypeName", DbType="VarChar(50)")]
		public string phoneTypeName
		{
			get
			{
				return this._phoneTypeName;
			}
			set
			{
				if ((this._phoneTypeName != value))
				{
					this.OnphoneTypeNameChanging(value);
					this.SendPropertyChanging();
					this._phoneTypeName = value;
					this.SendPropertyChanged("phoneTypeName");
					this.OnphoneTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="refPhoneType_Phone", Storage="_Phones", ThisKey="id", OtherKey="phoneTypeId")]
		public EntitySet<Phone> Phones
		{
			get
			{
				return this._Phones;
			}
			set
			{
				this._Phones.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Phones(Phone entity)
		{
			this.SendPropertyChanging();
			entity.refPhoneType = this;
		}
		
		private void detach_Phones(Phone entity)
		{
			this.SendPropertyChanging();
			entity.refPhoneType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.refTableOfficerPosition")]
	public partial class refTableOfficerPosition : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _positionName;
		
		private EntitySet<FacilityTableOfficer> _FacilityTableOfficers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnpositionNameChanging(string value);
    partial void OnpositionNameChanged();
    #endregion
		
		public refTableOfficerPosition()
		{
			this._FacilityTableOfficers = new EntitySet<FacilityTableOfficer>(new Action<FacilityTableOfficer>(this.attach_FacilityTableOfficers), new Action<FacilityTableOfficer>(this.detach_FacilityTableOfficers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_positionName", DbType="VarChar(100)")]
		public string positionName
		{
			get
			{
				return this._positionName;
			}
			set
			{
				if ((this._positionName != value))
				{
					this.OnpositionNameChanging(value);
					this.SendPropertyChanging();
					this._positionName = value;
					this.SendPropertyChanged("positionName");
					this.OnpositionNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="refTableOfficerPosition_FacilityTableOfficer", Storage="_FacilityTableOfficers", ThisKey="id", OtherKey="positionId")]
		public EntitySet<FacilityTableOfficer> FacilityTableOfficers
		{
			get
			{
				return this._FacilityTableOfficers;
			}
			set
			{
				this._FacilityTableOfficers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FacilityTableOfficers(FacilityTableOfficer entity)
		{
			this.SendPropertyChanging();
			entity.refTableOfficerPosition = this;
		}
		
		private void detach_FacilityTableOfficers(FacilityTableOfficer entity)
		{
			this.SendPropertyChanging();
			entity.refTableOfficerPosition = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Region")]
	public partial class Region : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _regionName;
		
		private EntitySet<District> _Districts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnregionNameChanging(string value);
    partial void OnregionNameChanged();
    #endregion
		
		public Region()
		{
			this._Districts = new EntitySet<District>(new Action<District>(this.attach_Districts), new Action<District>(this.detach_Districts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_regionName", DbType="VarChar(500)")]
		public string regionName
		{
			get
			{
				return this._regionName;
			}
			set
			{
				if ((this._regionName != value))
				{
					this.OnregionNameChanging(value);
					this.SendPropertyChanging();
					this._regionName = value;
					this.SendPropertyChanged("regionName");
					this.OnregionNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Region_District", Storage="_Districts", ThisKey="id", OtherKey="regionId")]
		public EntitySet<District> Districts
		{
			get
			{
				return this._Districts;
			}
			set
			{
				this._Districts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Districts(District entity)
		{
			this.SendPropertyChanging();
			entity.Region = this;
		}
		
		private void detach_Districts(District entity)
		{
			this.SendPropertyChanging();
			entity.Region = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserProfile")]
	public partial class UserProfile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _email;
		
		private string _password;
		
		private string _username;
		
		private System.DateTime _creationDate;
		
		private string _secondaryemail;
		
		private EntitySet<UserProfileRole> _UserProfileRoles;
		
		private EntityRef<Nurse> _Nurse;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OncreationDateChanging(System.DateTime value);
    partial void OncreationDateChanged();
    partial void OnsecondaryemailChanging(string value);
    partial void OnsecondaryemailChanged();
    #endregion
		
		public UserProfile()
		{
			this._UserProfileRoles = new EntitySet<UserProfileRole>(new Action<UserProfileRole>(this.attach_UserProfileRoles), new Action<UserProfileRole>(this.detach_UserProfileRoles));
			this._Nurse = default(EntityRef<Nurse>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="VarChar(50)")]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_username", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_creationDate", DbType="DateTime NOT NULL")]
		public System.DateTime creationDate
		{
			get
			{
				return this._creationDate;
			}
			set
			{
				if ((this._creationDate != value))
				{
					this.OncreationDateChanging(value);
					this.SendPropertyChanging();
					this._creationDate = value;
					this.SendPropertyChanged("creationDate");
					this.OncreationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_secondaryemail", DbType="varchar(50)")]
		public string secondaryemail
		{
			get
			{
				return this._secondaryemail;
			}
			set
			{
				if ((this._secondaryemail != value))
				{
					this.OnsecondaryemailChanging(value);
					this.SendPropertyChanging();
					this._secondaryemail = value;
					this.SendPropertyChanged("secondaryemail");
					this.OnsecondaryemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_UserProfileRole", Storage="_UserProfileRoles", ThisKey="id", OtherKey="profileId")]
		public EntitySet<UserProfileRole> UserProfileRoles
		{
			get
			{
				return this._UserProfileRoles;
			}
			set
			{
				this._UserProfileRoles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_Nurse", Storage="_Nurse", ThisKey="id", OtherKey="userId", IsUnique=true, IsForeignKey=false)]
		public Nurse Nurse
		{
			get
			{
				return this._Nurse.Entity;
			}
			set
			{
				Nurse previousValue = this._Nurse.Entity;
				if (((previousValue != value) 
							|| (this._Nurse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Nurse.Entity = null;
						previousValue.UserProfile = null;
					}
					this._Nurse.Entity = value;
					if ((value != null))
					{
						value.UserProfile = this;
					}
					this.SendPropertyChanged("Nurse");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserProfileRoles(UserProfileRole entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = this;
		}
		
		private void detach_UserProfileRoles(UserProfileRole entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserProfileRole")]
	public partial class UserProfileRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _profileId;
		
		private int _roleId;
		
		private EntityRef<UserProfile> _UserProfile;
		
		private EntityRef<UserRole> _UserRole;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnprofileIdChanging(int value);
    partial void OnprofileIdChanged();
    partial void OnroleIdChanging(int value);
    partial void OnroleIdChanged();
    #endregion
		
		public UserProfileRole()
		{
			this._UserProfile = default(EntityRef<UserProfile>);
			this._UserRole = default(EntityRef<UserRole>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_profileId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int profileId
		{
			get
			{
				return this._profileId;
			}
			set
			{
				if ((this._profileId != value))
				{
					if (this._UserProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnprofileIdChanging(value);
					this.SendPropertyChanging();
					this._profileId = value;
					this.SendPropertyChanged("profileId");
					this.OnprofileIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_roleId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int roleId
		{
			get
			{
				return this._roleId;
			}
			set
			{
				if ((this._roleId != value))
				{
					if (this._UserRole.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnroleIdChanging(value);
					this.SendPropertyChanging();
					this._roleId = value;
					this.SendPropertyChanged("roleId");
					this.OnroleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_UserProfileRole", Storage="_UserProfile", ThisKey="profileId", OtherKey="id", IsForeignKey=true)]
		public UserProfile UserProfile
		{
			get
			{
				return this._UserProfile.Entity;
			}
			set
			{
				UserProfile previousValue = this._UserProfile.Entity;
				if (((previousValue != value) 
							|| (this._UserProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserProfile.Entity = null;
						previousValue.UserProfileRoles.Remove(this);
					}
					this._UserProfile.Entity = value;
					if ((value != null))
					{
						value.UserProfileRoles.Add(this);
						this._profileId = value.id;
					}
					else
					{
						this._profileId = default(int);
					}
					this.SendPropertyChanged("UserProfile");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserRole_UserProfileRole", Storage="_UserRole", ThisKey="roleId", OtherKey="id", IsForeignKey=true)]
		public UserRole UserRole
		{
			get
			{
				return this._UserRole.Entity;
			}
			set
			{
				UserRole previousValue = this._UserRole.Entity;
				if (((previousValue != value) 
							|| (this._UserRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserRole.Entity = null;
						previousValue.UserProfileRoles.Remove(this);
					}
					this._UserRole.Entity = value;
					if ((value != null))
					{
						value.UserProfileRoles.Add(this);
						this._roleId = value.id;
					}
					else
					{
						this._roleId = default(int);
					}
					this.SendPropertyChanged("UserRole");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserRole")]
	public partial class UserRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _roleName;
		
		private EntitySet<UserProfileRole> _UserProfileRoles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnroleNameChanging(string value);
    partial void OnroleNameChanged();
    #endregion
		
		public UserRole()
		{
			this._UserProfileRoles = new EntitySet<UserProfileRole>(new Action<UserProfileRole>(this.attach_UserProfileRoles), new Action<UserProfileRole>(this.detach_UserProfileRoles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_roleName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string roleName
		{
			get
			{
				return this._roleName;
			}
			set
			{
				if ((this._roleName != value))
				{
					this.OnroleNameChanging(value);
					this.SendPropertyChanging();
					this._roleName = value;
					this.SendPropertyChanged("roleName");
					this.OnroleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserRole_UserProfileRole", Storage="_UserProfileRoles", ThisKey="id", OtherKey="roleId")]
		public EntitySet<UserProfileRole> UserProfileRoles
		{
			get
			{
				return this._UserProfileRoles;
			}
			set
			{
				this._UserProfileRoles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserProfileRoles(UserProfileRole entity)
		{
			this.SendPropertyChanging();
			entity.UserRole = this;
		}
		
		private void detach_UserProfileRoles(UserProfileRole entity)
		{
			this.SendPropertyChanging();
			entity.UserRole = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VersionHistory")]
	public partial class VersionHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _nurseId;
		
		private string _modifiedBy;
		
		private System.DateTime _modificationDate;
		
		private string _versionXml;
		
		private EntityRef<Nurse> _Nurse;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnurseIdChanging(int value);
    partial void OnnurseIdChanged();
    partial void OnmodifiedByChanging(string value);
    partial void OnmodifiedByChanged();
    partial void OnmodificationDateChanging(System.DateTime value);
    partial void OnmodificationDateChanged();
    partial void OnversionXmlChanging(string value);
    partial void OnversionXmlChanged();
    #endregion
		
		public VersionHistory()
		{
			this._Nurse = default(EntityRef<Nurse>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nurseId", DbType="Int NOT NULL")]
		public int nurseId
		{
			get
			{
				return this._nurseId;
			}
			set
			{
				if ((this._nurseId != value))
				{
					if (this._Nurse.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnnurseIdChanging(value);
					this.SendPropertyChanging();
					this._nurseId = value;
					this.SendPropertyChanged("nurseId");
					this.OnnurseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_modifiedBy", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string modifiedBy
		{
			get
			{
				return this._modifiedBy;
			}
			set
			{
				if ((this._modifiedBy != value))
				{
					this.OnmodifiedByChanging(value);
					this.SendPropertyChanging();
					this._modifiedBy = value;
					this.SendPropertyChanged("modifiedBy");
					this.OnmodifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_modificationDate", DbType="DateTime NOT NULL")]
		public System.DateTime modificationDate
		{
			get
			{
				return this._modificationDate;
			}
			set
			{
				if ((this._modificationDate != value))
				{
					this.OnmodificationDateChanging(value);
					this.SendPropertyChanging();
					this._modificationDate = value;
					this.SendPropertyChanged("modificationDate");
					this.OnmodificationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_versionXml", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string versionXml
		{
			get
			{
				return this._versionXml;
			}
			set
			{
				if ((this._versionXml != value))
				{
					this.OnversionXmlChanging(value);
					this.SendPropertyChanging();
					this._versionXml = value;
					this.SendPropertyChanged("versionXml");
					this.OnversionXmlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Nurse_VersionHistory", Storage="_Nurse", ThisKey="nurseId", OtherKey="userId", IsForeignKey=true)]
		public Nurse Nurse
		{
			get
			{
				return this._Nurse.Entity;
			}
			set
			{
				Nurse previousValue = this._Nurse.Entity;
				if (((previousValue != value) 
							|| (this._Nurse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Nurse.Entity = null;
						previousValue.VersionHistories.Remove(this);
					}
					this._Nurse.Entity = value;
					if ((value != null))
					{
						value.VersionHistories.Add(this);
						this._nurseId = value.userId;
					}
					else
					{
						this._nurseId = default(int);
					}
					this.SendPropertyChanged("Nurse");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Phone")]
	public partial class Phone : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _phoneNumber;
		
		private System.Nullable<byte> _phoneTypeId;
		
		private string _extension;
		
		private string _lastModifiedBy;
		
		private System.Nullable<System.DateTime> _lastModifiedDate;
		
		private EntitySet<FacilityPhone> _FacilityPhones;
		
		private EntitySet<NursePhone> _NursePhones;
		
		private EntityRef<refPhoneType> _refPhoneType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnphoneNumberChanging(string value);
    partial void OnphoneNumberChanged();
    partial void OnphoneTypeIdChanging(System.Nullable<byte> value);
    partial void OnphoneTypeIdChanged();
    partial void OnextensionChanging(string value);
    partial void OnextensionChanged();
    partial void OnlastModifiedByChanging(string value);
    partial void OnlastModifiedByChanged();
    partial void OnlastModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnlastModifiedDateChanged();
    #endregion
		
		public Phone()
		{
			this._FacilityPhones = new EntitySet<FacilityPhone>(new Action<FacilityPhone>(this.attach_FacilityPhones), new Action<FacilityPhone>(this.detach_FacilityPhones));
			this._NursePhones = new EntitySet<NursePhone>(new Action<NursePhone>(this.attach_NursePhones), new Action<NursePhone>(this.detach_NursePhones));
			this._refPhoneType = default(EntityRef<refPhoneType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phoneNumber", DbType="VarChar(50)")]
		public string phoneNumber
		{
			get
			{
				return this._phoneNumber;
			}
			set
			{
				if ((this._phoneNumber != value))
				{
					this.OnphoneNumberChanging(value);
					this.SendPropertyChanging();
					this._phoneNumber = value;
					this.SendPropertyChanged("phoneNumber");
					this.OnphoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phoneTypeId", DbType="TinyInt")]
		public System.Nullable<byte> phoneTypeId
		{
			get
			{
				return this._phoneTypeId;
			}
			set
			{
				if ((this._phoneTypeId != value))
				{
					if (this._refPhoneType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnphoneTypeIdChanging(value);
					this.SendPropertyChanging();
					this._phoneTypeId = value;
					this.SendPropertyChanged("phoneTypeId");
					this.OnphoneTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_extension", DbType="VarChar(10)")]
		public string extension
		{
			get
			{
				return this._extension;
			}
			set
			{
				if ((this._extension != value))
				{
					this.OnextensionChanging(value);
					this.SendPropertyChanging();
					this._extension = value;
					this.SendPropertyChanged("extension");
					this.OnextensionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastModifiedBy", DbType="VarChar(50)")]
		public string lastModifiedBy
		{
			get
			{
				return this._lastModifiedBy;
			}
			set
			{
				if ((this._lastModifiedBy != value))
				{
					this.OnlastModifiedByChanging(value);
					this.SendPropertyChanging();
					this._lastModifiedBy = value;
					this.SendPropertyChanged("lastModifiedBy");
					this.OnlastModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastModifiedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> lastModifiedDate
		{
			get
			{
				return this._lastModifiedDate;
			}
			set
			{
				if ((this._lastModifiedDate != value))
				{
					this.OnlastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._lastModifiedDate = value;
					this.SendPropertyChanged("lastModifiedDate");
					this.OnlastModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Phone_FacilityPhone", Storage="_FacilityPhones", ThisKey="id", OtherKey="phoneId")]
		public EntitySet<FacilityPhone> FacilityPhones
		{
			get
			{
				return this._FacilityPhones;
			}
			set
			{
				this._FacilityPhones.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Phone_NursePhone", Storage="_NursePhones", ThisKey="id", OtherKey="phoneId")]
		public EntitySet<NursePhone> NursePhones
		{
			get
			{
				return this._NursePhones;
			}
			set
			{
				this._NursePhones.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="refPhoneType_Phone", Storage="_refPhoneType", ThisKey="phoneTypeId", OtherKey="id", IsForeignKey=true)]
		public refPhoneType refPhoneType
		{
			get
			{
				return this._refPhoneType.Entity;
			}
			set
			{
				refPhoneType previousValue = this._refPhoneType.Entity;
				if (((previousValue != value) 
							|| (this._refPhoneType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._refPhoneType.Entity = null;
						previousValue.Phones.Remove(this);
					}
					this._refPhoneType.Entity = value;
					if ((value != null))
					{
						value.Phones.Add(this);
						this._phoneTypeId = value.id;
					}
					else
					{
						this._phoneTypeId = default(Nullable<byte>);
					}
					this.SendPropertyChanged("refPhoneType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FacilityPhones(FacilityPhone entity)
		{
			this.SendPropertyChanging();
			entity.Phone = this;
		}
		
		private void detach_FacilityPhones(FacilityPhone entity)
		{
			this.SendPropertyChanging();
			entity.Phone = null;
		}
		
		private void attach_NursePhones(NursePhone entity)
		{
			this.SendPropertyChanging();
			entity.Phone = this;
		}
		
		private void detach_NursePhones(NursePhone entity)
		{
			this.SendPropertyChanging();
			entity.Phone = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NurseCommittee")]
	public partial class NurseCommittee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _nurseId;
		
		private byte _committeeId;
		
		private byte _positionId;
		
		private bool _isAlternate;
		
		private System.Nullable<int> _regionId;
		
		private System.Nullable<int> _districtId;
		
		private EntityRef<CommitteePosition> _CommitteePosition;
		
		private EntityRef<Nurse> _Nurse;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnnurseIdChanging(int value);
    partial void OnnurseIdChanged();
    partial void OncommitteeIdChanging(byte value);
    partial void OncommitteeIdChanged();
    partial void OnpositionIdChanging(byte value);
    partial void OnpositionIdChanged();
    partial void OnisAlternateChanging(bool value);
    partial void OnisAlternateChanged();
    partial void OnregionIdChanging(System.Nullable<int> value);
    partial void OnregionIdChanged();
    partial void OndistrictIdChanging(System.Nullable<int> value);
    partial void OndistrictIdChanged();
    #endregion
		
		public NurseCommittee()
		{
			this._CommitteePosition = default(EntityRef<CommitteePosition>);
			this._Nurse = default(EntityRef<Nurse>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nurseId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int nurseId
		{
			get
			{
				return this._nurseId;
			}
			set
			{
				if ((this._nurseId != value))
				{
					if (this._Nurse.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnnurseIdChanging(value);
					this.SendPropertyChanging();
					this._nurseId = value;
					this.SendPropertyChanged("nurseId");
					this.OnnurseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_committeeId", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte committeeId
		{
			get
			{
				return this._committeeId;
			}
			set
			{
				if ((this._committeeId != value))
				{
					if (this._CommitteePosition.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncommitteeIdChanging(value);
					this.SendPropertyChanging();
					this._committeeId = value;
					this.SendPropertyChanged("committeeId");
					this.OncommitteeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_positionId", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte positionId
		{
			get
			{
				return this._positionId;
			}
			set
			{
				if ((this._positionId != value))
				{
					if (this._CommitteePosition.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpositionIdChanging(value);
					this.SendPropertyChanging();
					this._positionId = value;
					this.SendPropertyChanged("positionId");
					this.OnpositionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isAlternate", DbType="Bit NOT NULL")]
		public bool isAlternate
		{
			get
			{
				return this._isAlternate;
			}
			set
			{
				if ((this._isAlternate != value))
				{
					this.OnisAlternateChanging(value);
					this.SendPropertyChanging();
					this._isAlternate = value;
					this.SendPropertyChanged("isAlternate");
					this.OnisAlternateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_regionId", DbType="Int")]
		public System.Nullable<int> regionId
		{
			get
			{
				return this._regionId;
			}
			set
			{
				if ((this._regionId != value))
				{
					this.OnregionIdChanging(value);
					this.SendPropertyChanging();
					this._regionId = value;
					this.SendPropertyChanged("regionId");
					this.OnregionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_districtId", DbType="Int")]
		public System.Nullable<int> districtId
		{
			get
			{
				return this._districtId;
			}
			set
			{
				if ((this._districtId != value))
				{
					this.OndistrictIdChanging(value);
					this.SendPropertyChanging();
					this._districtId = value;
					this.SendPropertyChanged("districtId");
					this.OndistrictIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CommitteePosition_NurseCommittee", Storage="_CommitteePosition", ThisKey="committeeId,positionId", OtherKey="committeeId,positionId", IsForeignKey=true)]
		public CommitteePosition CommitteePosition
		{
			get
			{
				return this._CommitteePosition.Entity;
			}
			set
			{
				CommitteePosition previousValue = this._CommitteePosition.Entity;
				if (((previousValue != value) 
							|| (this._CommitteePosition.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CommitteePosition.Entity = null;
						previousValue.NurseCommittees.Remove(this);
					}
					this._CommitteePosition.Entity = value;
					if ((value != null))
					{
						value.NurseCommittees.Add(this);
						this._committeeId = value.committeeId;
						this._positionId = value.positionId;
					}
					else
					{
						this._committeeId = default(byte);
						this._positionId = default(byte);
					}
					this.SendPropertyChanged("CommitteePosition");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Nurse_NurseCommittee", Storage="_Nurse", ThisKey="nurseId", OtherKey="userId", IsForeignKey=true)]
		public Nurse Nurse
		{
			get
			{
				return this._Nurse.Entity;
			}
			set
			{
				Nurse previousValue = this._Nurse.Entity;
				if (((previousValue != value) 
							|| (this._Nurse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Nurse.Entity = null;
						previousValue.NurseCommittees.Remove(this);
					}
					this._Nurse.Entity = value;
					if ((value != null))
					{
						value.NurseCommittees.Add(this);
						this._nurseId = value.userId;
					}
					else
					{
						this._nurseId = default(int);
					}
					this.SendPropertyChanged("Nurse");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Nurse")]
	public partial class Nurse : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _userId;
		
		private string _firstName;
		
		private string _initial;
		
		private string _lastName;
		
		private System.Nullable<byte> _genderId;
		
		private string _nickname;
		
		private System.Nullable<System.DateTime> _birthDate;
		
		private System.Nullable<byte> _nurseDesignationId;
		
		private System.Nullable<byte> _employmentStatusId;
		
		private System.Nullable<bool> _issuedMembershipCard;
		
		private System.Nullable<bool> _completedMembershipForm;
		
		private bool _isDeleted;
		
		private string _lastModifiedBy;
		
		private System.Nullable<System.DateTime> _lastModifiedDate;
		
		private EntitySet<Note> _Notes;
		
		private EntitySet<NurseAddress> _NurseAddresses;
		
		private EntitySet<NurseFacility> _NurseFacilities;
		
		private EntitySet<NurseOptOut> _NurseOptOuts;
		
		private EntitySet<NursePhone> _NursePhones;
		
		private EntitySet<VersionHistory> _VersionHistories;
		
		private EntitySet<NurseCommittee> _NurseCommittees;
		
		private EntityRef<refEmploymentStatus> _refEmploymentStatus;
		
		private EntityRef<refGender> _refGender;
		
		private EntityRef<refNurseDesignation> _refNurseDesignation;
		
		private EntityRef<UserProfile> _UserProfile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuserIdChanging(int value);
    partial void OnuserIdChanged();
    partial void OnfirstNameChanging(string value);
    partial void OnfirstNameChanged();
    partial void OninitialChanging(string value);
    partial void OninitialChanged();
    partial void OnlastNameChanging(string value);
    partial void OnlastNameChanged();
    partial void OngenderIdChanging(System.Nullable<byte> value);
    partial void OngenderIdChanged();
    partial void OnnicknameChanging(string value);
    partial void OnnicknameChanged();
    partial void OnbirthDateChanging(System.Nullable<System.DateTime> value);
    partial void OnbirthDateChanged();
    partial void OnnurseDesignationIdChanging(System.Nullable<byte> value);
    partial void OnnurseDesignationIdChanged();
    partial void OnemploymentStatusIdChanging(System.Nullable<byte> value);
    partial void OnemploymentStatusIdChanged();
    partial void OnissuedMembershipCardChanging(System.Nullable<bool> value);
    partial void OnissuedMembershipCardChanged();
    partial void OncompletedMembershipFormChanging(System.Nullable<bool> value);
    partial void OncompletedMembershipFormChanged();
    partial void OnisDeletedChanging(bool value);
    partial void OnisDeletedChanged();
    partial void OnlastModifiedByChanging(string value);
    partial void OnlastModifiedByChanged();
    partial void OnlastModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnlastModifiedDateChanged();
    #endregion
		
		public Nurse()
		{
			this._Notes = new EntitySet<Note>(new Action<Note>(this.attach_Notes), new Action<Note>(this.detach_Notes));
			this._NurseAddresses = new EntitySet<NurseAddress>(new Action<NurseAddress>(this.attach_NurseAddresses), new Action<NurseAddress>(this.detach_NurseAddresses));
			this._NurseFacilities = new EntitySet<NurseFacility>(new Action<NurseFacility>(this.attach_NurseFacilities), new Action<NurseFacility>(this.detach_NurseFacilities));
			this._NurseOptOuts = new EntitySet<NurseOptOut>(new Action<NurseOptOut>(this.attach_NurseOptOuts), new Action<NurseOptOut>(this.detach_NurseOptOuts));
			this._NursePhones = new EntitySet<NursePhone>(new Action<NursePhone>(this.attach_NursePhones), new Action<NursePhone>(this.detach_NursePhones));
			this._VersionHistories = new EntitySet<VersionHistory>(new Action<VersionHistory>(this.attach_VersionHistories), new Action<VersionHistory>(this.detach_VersionHistories));
			this._NurseCommittees = new EntitySet<NurseCommittee>(new Action<NurseCommittee>(this.attach_NurseCommittees), new Action<NurseCommittee>(this.detach_NurseCommittees));
			this._refEmploymentStatus = default(EntityRef<refEmploymentStatus>);
			this._refGender = default(EntityRef<refGender>);
			this._refNurseDesignation = default(EntityRef<refNurseDesignation>);
			this._UserProfile = default(EntityRef<UserProfile>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int userId
		{
			get
			{
				return this._userId;
			}
			set
			{
				if ((this._userId != value))
				{
					if (this._UserProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIdChanging(value);
					this.SendPropertyChanging();
					this._userId = value;
					this.SendPropertyChanged("userId");
					this.OnuserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_firstName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string firstName
		{
			get
			{
				return this._firstName;
			}
			set
			{
				if ((this._firstName != value))
				{
					this.OnfirstNameChanging(value);
					this.SendPropertyChanging();
					this._firstName = value;
					this.SendPropertyChanged("firstName");
					this.OnfirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_initial", DbType="VarChar(1)")]
		public string initial
		{
			get
			{
				return this._initial;
			}
			set
			{
				if ((this._initial != value))
				{
					this.OninitialChanging(value);
					this.SendPropertyChanging();
					this._initial = value;
					this.SendPropertyChanged("initial");
					this.OninitialChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string lastName
		{
			get
			{
				return this._lastName;
			}
			set
			{
				if ((this._lastName != value))
				{
					this.OnlastNameChanging(value);
					this.SendPropertyChanging();
					this._lastName = value;
					this.SendPropertyChanged("lastName");
					this.OnlastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_genderId", DbType="TinyInt")]
		public System.Nullable<byte> genderId
		{
			get
			{
				return this._genderId;
			}
			set
			{
				if ((this._genderId != value))
				{
					if (this._refGender.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OngenderIdChanging(value);
					this.SendPropertyChanging();
					this._genderId = value;
					this.SendPropertyChanged("genderId");
					this.OngenderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nickname", DbType="VarChar(100)")]
		public string nickname
		{
			get
			{
				return this._nickname;
			}
			set
			{
				if ((this._nickname != value))
				{
					this.OnnicknameChanging(value);
					this.SendPropertyChanging();
					this._nickname = value;
					this.SendPropertyChanged("nickname");
					this.OnnicknameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_birthDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> birthDate
		{
			get
			{
				return this._birthDate;
			}
			set
			{
				if ((this._birthDate != value))
				{
					this.OnbirthDateChanging(value);
					this.SendPropertyChanging();
					this._birthDate = value;
					this.SendPropertyChanged("birthDate");
					this.OnbirthDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nurseDesignationId", DbType="TinyInt")]
		public System.Nullable<byte> nurseDesignationId
		{
			get
			{
				return this._nurseDesignationId;
			}
			set
			{
				if ((this._nurseDesignationId != value))
				{
					if (this._refNurseDesignation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnnurseDesignationIdChanging(value);
					this.SendPropertyChanging();
					this._nurseDesignationId = value;
					this.SendPropertyChanged("nurseDesignationId");
					this.OnnurseDesignationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_employmentStatusId", DbType="TinyInt")]
		public System.Nullable<byte> employmentStatusId
		{
			get
			{
				return this._employmentStatusId;
			}
			set
			{
				if ((this._employmentStatusId != value))
				{
					if (this._refEmploymentStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnemploymentStatusIdChanging(value);
					this.SendPropertyChanging();
					this._employmentStatusId = value;
					this.SendPropertyChanged("employmentStatusId");
					this.OnemploymentStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_issuedMembershipCard", DbType="Bit")]
		public System.Nullable<bool> issuedMembershipCard
		{
			get
			{
				return this._issuedMembershipCard;
			}
			set
			{
				if ((this._issuedMembershipCard != value))
				{
					this.OnissuedMembershipCardChanging(value);
					this.SendPropertyChanging();
					this._issuedMembershipCard = value;
					this.SendPropertyChanged("issuedMembershipCard");
					this.OnissuedMembershipCardChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_completedMembershipForm", DbType="Bit")]
		public System.Nullable<bool> completedMembershipForm
		{
			get
			{
				return this._completedMembershipForm;
			}
			set
			{
				if ((this._completedMembershipForm != value))
				{
					this.OncompletedMembershipFormChanging(value);
					this.SendPropertyChanging();
					this._completedMembershipForm = value;
					this.SendPropertyChanged("completedMembershipForm");
					this.OncompletedMembershipFormChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isDeleted", DbType="Bit NOT NULL")]
		public bool isDeleted
		{
			get
			{
				return this._isDeleted;
			}
			set
			{
				if ((this._isDeleted != value))
				{
					this.OnisDeletedChanging(value);
					this.SendPropertyChanging();
					this._isDeleted = value;
					this.SendPropertyChanged("isDeleted");
					this.OnisDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastModifiedBy", DbType="VarChar(50)")]
		public string lastModifiedBy
		{
			get
			{
				return this._lastModifiedBy;
			}
			set
			{
				if ((this._lastModifiedBy != value))
				{
					this.OnlastModifiedByChanging(value);
					this.SendPropertyChanging();
					this._lastModifiedBy = value;
					this.SendPropertyChanged("lastModifiedBy");
					this.OnlastModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastModifiedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> lastModifiedDate
		{
			get
			{
				return this._lastModifiedDate;
			}
			set
			{
				if ((this._lastModifiedDate != value))
				{
					this.OnlastModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._lastModifiedDate = value;
					this.SendPropertyChanged("lastModifiedDate");
					this.OnlastModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Nurse_Note", Storage="_Notes", ThisKey="userId", OtherKey="nurseId")]
		public EntitySet<Note> Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				this._Notes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Nurse_NurseAddress", Storage="_NurseAddresses", ThisKey="userId", OtherKey="nurseId")]
		public EntitySet<NurseAddress> NurseAddresses
		{
			get
			{
				return this._NurseAddresses;
			}
			set
			{
				this._NurseAddresses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Nurse_NurseFacility", Storage="_NurseFacilities", ThisKey="userId", OtherKey="nurseId")]
		public EntitySet<NurseFacility> NurseFacilities
		{
			get
			{
				return this._NurseFacilities;
			}
			set
			{
				this._NurseFacilities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Nurse_NurseOptOut", Storage="_NurseOptOuts", ThisKey="userId", OtherKey="nurseId")]
		public EntitySet<NurseOptOut> NurseOptOuts
		{
			get
			{
				return this._NurseOptOuts;
			}
			set
			{
				this._NurseOptOuts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Nurse_NursePhone", Storage="_NursePhones", ThisKey="userId", OtherKey="userId")]
		public EntitySet<NursePhone> NursePhones
		{
			get
			{
				return this._NursePhones;
			}
			set
			{
				this._NursePhones.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Nurse_VersionHistory", Storage="_VersionHistories", ThisKey="userId", OtherKey="nurseId")]
		public EntitySet<VersionHistory> VersionHistories
		{
			get
			{
				return this._VersionHistories;
			}
			set
			{
				this._VersionHistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Nurse_NurseCommittee", Storage="_NurseCommittees", ThisKey="userId", OtherKey="nurseId")]
		public EntitySet<NurseCommittee> NurseCommittees
		{
			get
			{
				return this._NurseCommittees;
			}
			set
			{
				this._NurseCommittees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="refEmploymentStatus_Nurse", Storage="_refEmploymentStatus", ThisKey="employmentStatusId", OtherKey="id", IsForeignKey=true)]
		public refEmploymentStatus refEmploymentStatus
		{
			get
			{
				return this._refEmploymentStatus.Entity;
			}
			set
			{
				refEmploymentStatus previousValue = this._refEmploymentStatus.Entity;
				if (((previousValue != value) 
							|| (this._refEmploymentStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._refEmploymentStatus.Entity = null;
						previousValue.Nurses.Remove(this);
					}
					this._refEmploymentStatus.Entity = value;
					if ((value != null))
					{
						value.Nurses.Add(this);
						this._employmentStatusId = value.id;
					}
					else
					{
						this._employmentStatusId = default(Nullable<byte>);
					}
					this.SendPropertyChanged("refEmploymentStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="refGender_Nurse", Storage="_refGender", ThisKey="genderId", OtherKey="id", IsForeignKey=true)]
		public refGender refGender
		{
			get
			{
				return this._refGender.Entity;
			}
			set
			{
				refGender previousValue = this._refGender.Entity;
				if (((previousValue != value) 
							|| (this._refGender.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._refGender.Entity = null;
						previousValue.Nurses.Remove(this);
					}
					this._refGender.Entity = value;
					if ((value != null))
					{
						value.Nurses.Add(this);
						this._genderId = value.id;
					}
					else
					{
						this._genderId = default(Nullable<byte>);
					}
					this.SendPropertyChanged("refGender");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="refNurseDesignation_Nurse", Storage="_refNurseDesignation", ThisKey="nurseDesignationId", OtherKey="id", IsForeignKey=true)]
		public refNurseDesignation refNurseDesignation
		{
			get
			{
				return this._refNurseDesignation.Entity;
			}
			set
			{
				refNurseDesignation previousValue = this._refNurseDesignation.Entity;
				if (((previousValue != value) 
							|| (this._refNurseDesignation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._refNurseDesignation.Entity = null;
						previousValue.Nurses.Remove(this);
					}
					this._refNurseDesignation.Entity = value;
					if ((value != null))
					{
						value.Nurses.Add(this);
						this._nurseDesignationId = value.id;
					}
					else
					{
						this._nurseDesignationId = default(Nullable<byte>);
					}
					this.SendPropertyChanged("refNurseDesignation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_Nurse", Storage="_UserProfile", ThisKey="userId", OtherKey="id", IsForeignKey=true)]
		public UserProfile UserProfile
		{
			get
			{
				return this._UserProfile.Entity;
			}
			set
			{
				UserProfile previousValue = this._UserProfile.Entity;
				if (((previousValue != value) 
							|| (this._UserProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserProfile.Entity = null;
						previousValue.Nurse = null;
					}
					this._UserProfile.Entity = value;
					if ((value != null))
					{
						value.Nurse = this;
						this._userId = value.id;
					}
					else
					{
						this._userId = default(int);
					}
					this.SendPropertyChanged("UserProfile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Notes(Note entity)
		{
			this.SendPropertyChanging();
			entity.Nurse = this;
		}
		
		private void detach_Notes(Note entity)
		{
			this.SendPropertyChanging();
			entity.Nurse = null;
		}
		
		private void attach_NurseAddresses(NurseAddress entity)
		{
			this.SendPropertyChanging();
			entity.Nurse = this;
		}
		
		private void detach_NurseAddresses(NurseAddress entity)
		{
			this.SendPropertyChanging();
			entity.Nurse = null;
		}
		
		private void attach_NurseFacilities(NurseFacility entity)
		{
			this.SendPropertyChanging();
			entity.Nurse = this;
		}
		
		private void detach_NurseFacilities(NurseFacility entity)
		{
			this.SendPropertyChanging();
			entity.Nurse = null;
		}
		
		private void attach_NurseOptOuts(NurseOptOut entity)
		{
			this.SendPropertyChanging();
			entity.Nurse = this;
		}
		
		private void detach_NurseOptOuts(NurseOptOut entity)
		{
			this.SendPropertyChanging();
			entity.Nurse = null;
		}
		
		private void attach_NursePhones(NursePhone entity)
		{
			this.SendPropertyChanging();
			entity.Nurse = this;
		}
		
		private void detach_NursePhones(NursePhone entity)
		{
			this.SendPropertyChanging();
			entity.Nurse = null;
		}
		
		private void attach_VersionHistories(VersionHistory entity)
		{
			this.SendPropertyChanging();
			entity.Nurse = this;
		}
		
		private void detach_VersionHistories(VersionHistory entity)
		{
			this.SendPropertyChanging();
			entity.Nurse = null;
		}
		
		private void attach_NurseCommittees(NurseCommittee entity)
		{
			this.SendPropertyChanging();
			entity.Nurse = this;
		}
		
		private void detach_NurseCommittees(NurseCommittee entity)
		{
			this.SendPropertyChanging();
			entity.Nurse = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Facility")]
	public partial class Facility : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _facilityName;
		
		private bool _casualCoverage;
		
		private bool _lpnCoverage;
		
		private int _districtId;
		
		private int _labourRepId;
		
		private byte _facilityTypeId;
		
		private System.Nullable<byte> _employerGroupId;
		
		private EntitySet<FacilityAddress> _FacilityAddresses;
		
		private EntitySet<FacilityPhone> _FacilityPhones;
		
		private EntitySet<NurseFacility> _NurseFacilities;
		
		private EntityRef<District> _District;
		
		private EntityRef<refEmployerGroup> _refEmployerGroup;
		
		private EntityRef<refFacilityType> _refFacilityType;
		
		private EntityRef<LabourRepresentative> _LabourRepresentative;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnfacilityNameChanging(string value);
    partial void OnfacilityNameChanged();
    partial void OncasualCoverageChanging(bool value);
    partial void OncasualCoverageChanged();
    partial void OnlpnCoverageChanging(bool value);
    partial void OnlpnCoverageChanged();
    partial void OndistrictIdChanging(int value);
    partial void OndistrictIdChanged();
    partial void OnlabourRepIdChanging(int value);
    partial void OnlabourRepIdChanged();
    partial void OnfacilityTypeIdChanging(byte value);
    partial void OnfacilityTypeIdChanged();
    partial void OnemployerGroupIdChanging(System.Nullable<byte> value);
    partial void OnemployerGroupIdChanged();
    #endregion
		
		public Facility()
		{
			this._FacilityAddresses = new EntitySet<FacilityAddress>(new Action<FacilityAddress>(this.attach_FacilityAddresses), new Action<FacilityAddress>(this.detach_FacilityAddresses));
			this._FacilityPhones = new EntitySet<FacilityPhone>(new Action<FacilityPhone>(this.attach_FacilityPhones), new Action<FacilityPhone>(this.detach_FacilityPhones));
			this._NurseFacilities = new EntitySet<NurseFacility>(new Action<NurseFacility>(this.attach_NurseFacilities), new Action<NurseFacility>(this.detach_NurseFacilities));
			this._District = default(EntityRef<District>);
			this._refEmployerGroup = default(EntityRef<refEmployerGroup>);
			this._refFacilityType = default(EntityRef<refFacilityType>);
			this._LabourRepresentative = default(EntityRef<LabourRepresentative>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_facilityName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string facilityName
		{
			get
			{
				return this._facilityName;
			}
			set
			{
				if ((this._facilityName != value))
				{
					this.OnfacilityNameChanging(value);
					this.SendPropertyChanging();
					this._facilityName = value;
					this.SendPropertyChanged("facilityName");
					this.OnfacilityNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_casualCoverage", DbType="Bit NOT NULL")]
		public bool casualCoverage
		{
			get
			{
				return this._casualCoverage;
			}
			set
			{
				if ((this._casualCoverage != value))
				{
					this.OncasualCoverageChanging(value);
					this.SendPropertyChanging();
					this._casualCoverage = value;
					this.SendPropertyChanged("casualCoverage");
					this.OncasualCoverageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lpnCoverage", DbType="Bit NOT NULL")]
		public bool lpnCoverage
		{
			get
			{
				return this._lpnCoverage;
			}
			set
			{
				if ((this._lpnCoverage != value))
				{
					this.OnlpnCoverageChanging(value);
					this.SendPropertyChanging();
					this._lpnCoverage = value;
					this.SendPropertyChanged("lpnCoverage");
					this.OnlpnCoverageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_districtId", DbType="Int NOT NULL")]
		public int districtId
		{
			get
			{
				return this._districtId;
			}
			set
			{
				if ((this._districtId != value))
				{
					if (this._District.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OndistrictIdChanging(value);
					this.SendPropertyChanging();
					this._districtId = value;
					this.SendPropertyChanged("districtId");
					this.OndistrictIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_labourRepId", DbType="Int NOT NULL")]
		public int labourRepId
		{
			get
			{
				return this._labourRepId;
			}
			set
			{
				if ((this._labourRepId != value))
				{
					if (this._LabourRepresentative.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnlabourRepIdChanging(value);
					this.SendPropertyChanging();
					this._labourRepId = value;
					this.SendPropertyChanged("labourRepId");
					this.OnlabourRepIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_facilityTypeId", DbType="TinyInt NOT NULL")]
		public byte facilityTypeId
		{
			get
			{
				return this._facilityTypeId;
			}
			set
			{
				if ((this._facilityTypeId != value))
				{
					if (this._refFacilityType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnfacilityTypeIdChanging(value);
					this.SendPropertyChanging();
					this._facilityTypeId = value;
					this.SendPropertyChanged("facilityTypeId");
					this.OnfacilityTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_employerGroupId", DbType="TinyInt")]
		public System.Nullable<byte> employerGroupId
		{
			get
			{
				return this._employerGroupId;
			}
			set
			{
				if ((this._employerGroupId != value))
				{
					if (this._refEmployerGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnemployerGroupIdChanging(value);
					this.SendPropertyChanging();
					this._employerGroupId = value;
					this.SendPropertyChanged("employerGroupId");
					this.OnemployerGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Facility_FacilityAddress", Storage="_FacilityAddresses", ThisKey="id", OtherKey="facilityId")]
		public EntitySet<FacilityAddress> FacilityAddresses
		{
			get
			{
				return this._FacilityAddresses;
			}
			set
			{
				this._FacilityAddresses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Facility_FacilityPhone", Storage="_FacilityPhones", ThisKey="id", OtherKey="facilityId")]
		public EntitySet<FacilityPhone> FacilityPhones
		{
			get
			{
				return this._FacilityPhones;
			}
			set
			{
				this._FacilityPhones.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Facility_NurseFacility", Storage="_NurseFacilities", ThisKey="id", OtherKey="facilityId")]
		public EntitySet<NurseFacility> NurseFacilities
		{
			get
			{
				return this._NurseFacilities;
			}
			set
			{
				this._NurseFacilities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="District_Facility", Storage="_District", ThisKey="districtId", OtherKey="id", IsForeignKey=true)]
		public District District
		{
			get
			{
				return this._District.Entity;
			}
			set
			{
				District previousValue = this._District.Entity;
				if (((previousValue != value) 
							|| (this._District.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._District.Entity = null;
						previousValue.Facilities.Remove(this);
					}
					this._District.Entity = value;
					if ((value != null))
					{
						value.Facilities.Add(this);
						this._districtId = value.id;
					}
					else
					{
						this._districtId = default(int);
					}
					this.SendPropertyChanged("District");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="refEmployerGroup_Facility", Storage="_refEmployerGroup", ThisKey="employerGroupId", OtherKey="id", IsForeignKey=true)]
		public refEmployerGroup refEmployerGroup
		{
			get
			{
				return this._refEmployerGroup.Entity;
			}
			set
			{
				refEmployerGroup previousValue = this._refEmployerGroup.Entity;
				if (((previousValue != value) 
							|| (this._refEmployerGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._refEmployerGroup.Entity = null;
						previousValue.Facilities.Remove(this);
					}
					this._refEmployerGroup.Entity = value;
					if ((value != null))
					{
						value.Facilities.Add(this);
						this._employerGroupId = value.id;
					}
					else
					{
						this._employerGroupId = default(Nullable<byte>);
					}
					this.SendPropertyChanged("refEmployerGroup");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="refFacilityType_Facility", Storage="_refFacilityType", ThisKey="facilityTypeId", OtherKey="id", IsForeignKey=true)]
		public refFacilityType refFacilityType
		{
			get
			{
				return this._refFacilityType.Entity;
			}
			set
			{
				refFacilityType previousValue = this._refFacilityType.Entity;
				if (((previousValue != value) 
							|| (this._refFacilityType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._refFacilityType.Entity = null;
						previousValue.Facilities.Remove(this);
					}
					this._refFacilityType.Entity = value;
					if ((value != null))
					{
						value.Facilities.Add(this);
						this._facilityTypeId = value.id;
					}
					else
					{
						this._facilityTypeId = default(byte);
					}
					this.SendPropertyChanged("refFacilityType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LabourRepresentative_Facility", Storage="_LabourRepresentative", ThisKey="labourRepId", OtherKey="id", IsForeignKey=true)]
		public LabourRepresentative LabourRepresentative
		{
			get
			{
				return this._LabourRepresentative.Entity;
			}
			set
			{
				LabourRepresentative previousValue = this._LabourRepresentative.Entity;
				if (((previousValue != value) 
							|| (this._LabourRepresentative.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LabourRepresentative.Entity = null;
						previousValue.Facilities.Remove(this);
					}
					this._LabourRepresentative.Entity = value;
					if ((value != null))
					{
						value.Facilities.Add(this);
						this._labourRepId = value.id;
					}
					else
					{
						this._labourRepId = default(int);
					}
					this.SendPropertyChanged("LabourRepresentative");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FacilityAddresses(FacilityAddress entity)
		{
			this.SendPropertyChanging();
			entity.Facility = this;
		}
		
		private void detach_FacilityAddresses(FacilityAddress entity)
		{
			this.SendPropertyChanging();
			entity.Facility = null;
		}
		
		private void attach_FacilityPhones(FacilityPhone entity)
		{
			this.SendPropertyChanging();
			entity.Facility = this;
		}
		
		private void detach_FacilityPhones(FacilityPhone entity)
		{
			this.SendPropertyChanging();
			entity.Facility = null;
		}
		
		private void attach_NurseFacilities(NurseFacility entity)
		{
			this.SendPropertyChanging();
			entity.Facility = this;
		}
		
		private void detach_NurseFacilities(NurseFacility entity)
		{
			this.SendPropertyChanging();
			entity.Facility = null;
		}
	}
	
	public partial class GetRolesForUserResult
	{
		
		private string _roleName;
		
		public GetRolesForUserResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_roleName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string roleName
		{
			get
			{
				return this._roleName;
			}
			set
			{
				if ((this._roleName != value))
				{
					this._roleName = value;
				}
			}
		}
	}
	
	public partial class GetFacilitiesForExportResult
	{
		
		private int _id;
		
		private string _facilityName;
		
		private bool _casualCoverage;
		
		private bool _lpnCoverage;
		
		private string _DistrictName;
		
		private string _regionname;
		
		private string _Labour_Rep;
		
		private string _facilityTypeName;
		
		private string _EmployerGroupName;
		
		private string _line1;
		
		private string _line2;
		
		private string _city;
		
		private string _provinceid;
		
		private string _postalCode;
		
		private string _PhoneNumber;
		
		public GetFacilitiesForExportResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL")]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this._id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_facilityName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string facilityName
		{
			get
			{
				return this._facilityName;
			}
			set
			{
				if ((this._facilityName != value))
				{
					this._facilityName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_casualCoverage", DbType="Bit NOT NULL")]
		public bool casualCoverage
		{
			get
			{
				return this._casualCoverage;
			}
			set
			{
				if ((this._casualCoverage != value))
				{
					this._casualCoverage = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lpnCoverage", DbType="Bit NOT NULL")]
		public bool lpnCoverage
		{
			get
			{
				return this._lpnCoverage;
			}
			set
			{
				if ((this._lpnCoverage != value))
				{
					this._lpnCoverage = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DistrictName", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string DistrictName
		{
			get
			{
				return this._DistrictName;
			}
			set
			{
				if ((this._DistrictName != value))
				{
					this._DistrictName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_regionname", DbType="VarChar(500)")]
		public string regionname
		{
			get
			{
				return this._regionname;
			}
			set
			{
				if ((this._regionname != value))
				{
					this._regionname = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Labour Rep]", Storage="_Labour_Rep", DbType="VarChar(201)")]
		public string Labour_Rep
		{
			get
			{
				return this._Labour_Rep;
			}
			set
			{
				if ((this._Labour_Rep != value))
				{
					this._Labour_Rep = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_facilityTypeName", DbType="VarChar(100)")]
		public string facilityTypeName
		{
			get
			{
				return this._facilityTypeName;
			}
			set
			{
				if ((this._facilityTypeName != value))
				{
					this._facilityTypeName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployerGroupName", DbType="VarChar(100)")]
		public string EmployerGroupName
		{
			get
			{
				return this._EmployerGroupName;
			}
			set
			{
				if ((this._EmployerGroupName != value))
				{
					this._EmployerGroupName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_line1", DbType="VarChar(200)")]
		public string line1
		{
			get
			{
				return this._line1;
			}
			set
			{
				if ((this._line1 != value))
				{
					this._line1 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_line2", DbType="VarChar(200)")]
		public string line2
		{
			get
			{
				return this._line2;
			}
			set
			{
				if ((this._line2 != value))
				{
					this._line2 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_city", DbType="VarChar(200)")]
		public string city
		{
			get
			{
				return this._city;
			}
			set
			{
				if ((this._city != value))
				{
					this._city = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_provinceid", DbType="Char(2)")]
		public string provinceid
		{
			get
			{
				return this._provinceid;
			}
			set
			{
				if ((this._provinceid != value))
				{
					this._provinceid = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_postalCode", DbType="VarChar(50)")]
		public string postalCode
		{
			get
			{
				return this._postalCode;
			}
			set
			{
				if ((this._postalCode != value))
				{
					this._postalCode = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="VarChar(50)")]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this._PhoneNumber = value;
				}
			}
		}
	}
	
	public partial class GetFilledCommitteePositionsResult
	{
		
		private byte _committeeId;
		
		private byte _positionId;
		
		private bool _isAlternate;
		
		private System.Nullable<int> _regionId;
		
		private System.Nullable<int> _districtId;
		
		private int _maxPositions;
		
		private int _maxAlternates;
		
		private System.Nullable<int> _currentCount;
		
		public GetFilledCommitteePositionsResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_committeeId", DbType="TinyInt NOT NULL")]
		public byte committeeId
		{
			get
			{
				return this._committeeId;
			}
			set
			{
				if ((this._committeeId != value))
				{
					this._committeeId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_positionId", DbType="TinyInt NOT NULL")]
		public byte positionId
		{
			get
			{
				return this._positionId;
			}
			set
			{
				if ((this._positionId != value))
				{
					this._positionId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isAlternate", DbType="Bit NOT NULL")]
		public bool isAlternate
		{
			get
			{
				return this._isAlternate;
			}
			set
			{
				if ((this._isAlternate != value))
				{
					this._isAlternate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_regionId", DbType="Int")]
		public System.Nullable<int> regionId
		{
			get
			{
				return this._regionId;
			}
			set
			{
				if ((this._regionId != value))
				{
					this._regionId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_districtId", DbType="Int")]
		public System.Nullable<int> districtId
		{
			get
			{
				return this._districtId;
			}
			set
			{
				if ((this._districtId != value))
				{
					this._districtId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_maxPositions", DbType="Int NOT NULL")]
		public int maxPositions
		{
			get
			{
				return this._maxPositions;
			}
			set
			{
				if ((this._maxPositions != value))
				{
					this._maxPositions = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_maxAlternates", DbType="Int NOT NULL")]
		public int maxAlternates
		{
			get
			{
				return this._maxAlternates;
			}
			set
			{
				if ((this._maxAlternates != value))
				{
					this._maxAlternates = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_currentCount", DbType="Int")]
		public System.Nullable<int> currentCount
		{
			get
			{
				return this._currentCount;
			}
			set
			{
				if ((this._currentCount != value))
				{
					this._currentCount = value;
				}
			}
		}
	}
	
	public partial class SearchUserProfilesResult
	{
		
		private int _userId;
		
		private string _firstName;
		
		private string _lastName;
		
		private string _initial;
		
		private string _nickname;
		
		private System.Nullable<byte> _genderId;
		
		private System.Nullable<System.DateTime> _birthdate;
		
		private string _username;
		
		private string _phone;
		
		private string _email;
		
		private string _secondaryemail;
		
		private System.Nullable<byte> _nurseDesignationId;
		
		private System.Nullable<byte> _employmentStatusId;
		
		private string _primaryFacility;
		
		private string _line1;
		
		private string _line2;
		
		private string _city;
		
		private string _provinceId;
		
		private string _postalCode;
		
		private System.Nullable<byte> _primaryEmploymentTypeId;
		
		public SearchUserProfilesResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userId", DbType="Int NOT NULL")]
		public int userId
		{
			get
			{
				return this._userId;
			}
			set
			{
				if ((this._userId != value))
				{
					this._userId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_firstName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string firstName
		{
			get
			{
				return this._firstName;
			}
			set
			{
				if ((this._firstName != value))
				{
					this._firstName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string lastName
		{
			get
			{
				return this._lastName;
			}
			set
			{
				if ((this._lastName != value))
				{
					this._lastName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_initial", DbType="VarChar(1)")]
		public string initial
		{
			get
			{
				return this._initial;
			}
			set
			{
				if ((this._initial != value))
				{
					this._initial = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nickname", DbType="VarChar(100)")]
		public string nickname
		{
			get
			{
				return this._nickname;
			}
			set
			{
				if ((this._nickname != value))
				{
					this._nickname = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_genderId", DbType="TinyInt")]
		public System.Nullable<byte> genderId
		{
			get
			{
				return this._genderId;
			}
			set
			{
				if ((this._genderId != value))
				{
					this._genderId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_birthdate", DbType="DateTime")]
		public System.Nullable<System.DateTime> birthdate
		{
			get
			{
				return this._birthdate;
			}
			set
			{
				if ((this._birthdate != value))
				{
					this._birthdate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_username", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this._username = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phone", DbType="VarChar(50)")]
		public string phone
		{
			get
			{
				return this._phone;
			}
			set
			{
				if ((this._phone != value))
				{
					this._phone = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="VarChar(100)")]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this._email = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_secondaryemail", DbType="VarChar(50)")]
		public string secondaryemail
		{
			get
			{
				return this._secondaryemail;
			}
			set
			{
				if ((this._secondaryemail != value))
				{
					this._secondaryemail = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nurseDesignationId", DbType="TinyInt")]
		public System.Nullable<byte> nurseDesignationId
		{
			get
			{
				return this._nurseDesignationId;
			}
			set
			{
				if ((this._nurseDesignationId != value))
				{
					this._nurseDesignationId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_employmentStatusId", DbType="TinyInt")]
		public System.Nullable<byte> employmentStatusId
		{
			get
			{
				return this._employmentStatusId;
			}
			set
			{
				if ((this._employmentStatusId != value))
				{
					this._employmentStatusId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_primaryFacility", DbType="VarChar(100)")]
		public string primaryFacility
		{
			get
			{
				return this._primaryFacility;
			}
			set
			{
				if ((this._primaryFacility != value))
				{
					this._primaryFacility = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_line1", DbType="VarChar(200)")]
		public string line1
		{
			get
			{
				return this._line1;
			}
			set
			{
				if ((this._line1 != value))
				{
					this._line1 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_line2", DbType="VarChar(200)")]
		public string line2
		{
			get
			{
				return this._line2;
			}
			set
			{
				if ((this._line2 != value))
				{
					this._line2 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_city", DbType="VarChar(200)")]
		public string city
		{
			get
			{
				return this._city;
			}
			set
			{
				if ((this._city != value))
				{
					this._city = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_provinceId", DbType="Char(2)")]
		public string provinceId
		{
			get
			{
				return this._provinceId;
			}
			set
			{
				if ((this._provinceId != value))
				{
					this._provinceId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_postalCode", DbType="VarChar(50)")]
		public string postalCode
		{
			get
			{
				return this._postalCode;
			}
			set
			{
				if ((this._postalCode != value))
				{
					this._postalCode = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_primaryEmploymentTypeId", DbType="TinyInt")]
		public System.Nullable<byte> primaryEmploymentTypeId
		{
			get
			{
				return this._primaryEmploymentTypeId;
			}
			set
			{
				if ((this._primaryEmploymentTypeId != value))
				{
					this._primaryEmploymentTypeId = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
